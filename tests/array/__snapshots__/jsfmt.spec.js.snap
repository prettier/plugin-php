// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrays.php 1`] = `
<?php

$test = array(1, 2, 3, 4, "test");
$test = array(1,2,3,4,"test");
$test = array( 1 , 2 , 3 , 4 , "test" ) ;
$test = array(  1  ,  2  ,  3  ,  4  ,  "test"  )  ;
$test = array(
    1,
    2,
    3,
    4,
    "test"
);
$test =
    array(
    1,
    2,
    3,
    4,
    "test"
    );
$test =
array(
1,
2,
3,
4,
"test"
)
;
$test =

array

(

1,

2,

3,

4,

"test"

)

;
$test = [1, 2, 3, 4, "test"];
$test = [1,2,3,4,"test"];
$test = [ 1 , 2 , 3 , 4 , "test" ] ;
$test = [  1  ,  2  ,  3  ,  4  ,  "test"  ]  ;
$test = [
    1,
    2,
    3,
    4,
    "test"
];
$test =
    [
        1,
        2,
        3,
        4,
        "test"
    ];
$test =
[
1,
2,
3,
4,
"test"
]
;
$test =

[

1,

2,

3,

4,

"test"

]

;
$other_test = [1, 2, 123.4324, $hi];
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one'=>123,'two'=>$other);
$keyed_test = array  (  'one'  =>  123  ,  'two'  =>  $other  )  ;
$keyed_test = array(
    'one' => 123,
    'two' => $other
);
$keyed_test =
    array(
        'one' => 123,
        'two' => $other
    );
$keyed_test
=
array
(
'one'
=>
123,
'two'
=>
$other
)
;
$keyed_test

=

array

(

'one'

=>

123,

'two'

=>

$other

)

;
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one'=>123,'two'=>$other];
$keyed_test = [  'one'  =>  123  ,  'two'  =>  $other  ]  ;
$keyed_test = [
    'one' => 123,
    'two' => $other
];
$keyed_test =
    [
        'one' => 123,
        'two' => $other
    ];
$keyed_test
=
[
'one'
=>
123,
'two'
=>
$other
]
;
$keyed_test

=

[

'one'

=>

123,

'two'

=>

$other

]

;
$short_keyed_test = array('reallyreallyreallyreallylongkey' => 1248, 'otherkey' => 234, 'one more' => $hi);
$short_keyed_test = ['reallyreallyreallyreallylongkey' => 1248, 'otherkey' => 234, 'one more' => $hi];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] ;
$foo = $bar  [  1  ]  [  2  ]  [  3  ]  [  4  ]  [  5  ]  [  6  ]  ;
$foo = $bar
[
1
]
[
2
]
[
3
]
[
4
]
[
5
]
[
6
]
;
$foo = $bar

[

1

]

[

2

]

[

3

]

[

4

]

[

5

]

[

6

]

;
$array = array(
    1    => "a",
    "1"  => "b",
    1.5  => "c",
    true => "d",
);
$array = array(
    "a",
    "b",
    6 => "c",
    "d",
);
$array = array(
    "foo" => "bar",
    42    => 24,
    "multi" => array(
        "dimensional" => array(
            "array" => "foo"
        )
    )
);
$secondElement = getArray()[1];
$arr[] = 56;
$arr[ ] = 56;
$arr[  ] = 56;
$arr
[
]
=
56
;
$arr

[

]

=

56

;
echo $arr[somefunc($bar)];
echo $arr [ somefunc ( $bar ) ] ;
echo $arr  [  somefunc  (  $bar  )  ]  ;
echo
$arr
[
somefunc
(
$bar
)
]
;
echo

$arr

[

somefunc

(

$bar

)

]

;
$a = array_fill_keys(array('foo', 5, 10, 'bar'), 'banana');
$a = array_fill_keys(array('foo',5,10,'bar'),'banana');
$a = array_fill_keys(['foo', 5, 10, 'bar'], 'banana') ;
$a = array_fill_keys(  [  'foo'  ,  5  ,  10  ,  'bar'  ]  , 'banana'  )  ;
$secondElement = getArray()[1];
unset($arr[5]);
$arr["x"] = 42;
echo $arr[somefunc($bar)];
$test = $array[foo];

$this->long->expression->before->array->statesArray[
  $state->getCirculationStateId()
] = $state->getName();
$arr[ ] = 1;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");

$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];

$other_test = [1, 2, 123.4324, $hi];
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one' => 123, 'two' => $other);

$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one' => 123, 'two' => $other];

$short_keyed_test = array(
    'reallyreallyreallyreallylongkey' => 1248,
    'otherkey' => 234,
    'one more' => $hi
);
$short_keyed_test = [
    'reallyreallyreallyreallylongkey' => 1248,
    'otherkey' => 234,
    'one more' => $hi
];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];

$array = array(1 => "a", "1" => "b", 1.5 => "c", true => "d");
$array = array("a", "b", 6 => "c", "d");
$array = array(
    "foo" => "bar",
    42 => 24,
    "multi" => array("dimensional" => array("array" => "foo"))
);
$secondElement = getArray()[1];
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;

echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
$a = array_fill_keys(array('foo', 5, 10, 'bar'), 'banana');
$a = array_fill_keys(array('foo', 5, 10, 'bar'), 'banana');
$a = array_fill_keys(['foo', 5, 10, 'bar'], 'banana');
$a = array_fill_keys(['foo', 5, 10, 'bar'], 'banana');
$secondElement = getArray()[1];
unset($arr[5]);
$arr["x"] = 42;
echo $arr[somefunc($bar)];
$test = $array[foo];

$this->long->expression->before->array->statesArray[
    $state->getCirculationStateId()
] = $state->getName();
$arr[] = 1;

`;
