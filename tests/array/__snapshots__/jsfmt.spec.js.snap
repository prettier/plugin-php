// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`arrays.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

$test = array(1, 2, 3, 4, "test");
$test = array(1,2,3,4,"test");
$test = array( 1 , 2 , 3 , 4 , "test" ) ;
$test = array(  1  ,  2  ,  3  ,  4  ,  "test"  )  ;
$test = array(
    1,
    2,
    3,
    4,
    "test"
);
$test =
    array(
    1,
    2,
    3,
    4,
    "test"
    );
$test =
array(
1,
2,
3,
4,
"test"
)
;
$test =

array

(

1,

2,

3,

4,

"test"

)

;
$test = [1, 2, 3, 4, "test"];
$test = [1,2,3,4,"test"];
$test = [ 1 , 2 , 3 , 4 , "test" ] ;
$test = [  1  ,  2  ,  3  ,  4  ,  "test"  ]  ;
$test = [
    1,
    2,
    3,
    4,
    "test"
];
$test =
    [
        1,
        2,
        3,
        4,
        "test"
    ];
$test =
[
1,
2,
3,
4,
"test"
]
;
$test =

[

1,

2,

3,

4,

"test"

]

;
$other_test = [1, 2, 123.4324, $hi];
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one'=>123,'two'=>$other);
$keyed_test = array  (  'one'  =>  123  ,  'two'  =>  $other  )  ;
$keyed_test = array(
    'one' => 123,
    'two' => $other
);
$keyed_test =
    array(
        'one' => 123,
        'two' => $other
    );
$keyed_test
=
array
(
'one'
=>
123,
'two'
=>
$other
)
;
$keyed_test

=

array

(

'one'

=>

123,

'two'

=>

$other

)

;
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one'=>123,'two'=>$other];
$keyed_test = [  'one'  =>  123  ,  'two'  =>  $other  ]  ;
$keyed_test = [
    'one' => 123,
    'two' => $other
];
$keyed_test =
    [
        'one' => 123,
        'two' => $other
    ];
$keyed_test
=
[
'one'
=>
123,
'two'
=>
$other
]
;
$keyed_test

=

[

'one'

=>

123,

'two'

=>

$other

]

;
$short_keyed_test = array('reallyreallyreallyreallylongkey' => 1248, 'otherkey' => 234, 'one more' => $hi);
$short_keyed_test = ['reallyreallyreallyreallylongkey' => 1248, 'otherkey' => 234, 'one more' => $hi];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] ;
$foo = $bar  [  1  ]  [  2  ]  [  3  ]  [  4  ]  [  5  ]  [  6  ]  ;
$foo = $bar
[
1
]
[
2
]
[
3
]
[
4
]
[
5
]
[
6
]
;
$foo = $bar

[

1

]

[

2

]

[

3

]

[

4

]

[

5

]

[

6

]

;
$array = array(
    1    => "a",
    "1"  => "b",
    1.5  => "c",
    true => "d",
);
$array = array(
    "a",
    "b",
    6 => "c",
    "d",
);
$array = array(
    "foo" => "bar",
    42    => 24,
    "multi" => array(
        "dimensional" => array(
            "array" => "foo"
        )
    )
);
$secondElement = getArray()[1];
$arr[] = 56;
$arr[ ] = 56;
$arr[  ] = 56;
$arr
[
]
=
56
;
$arr

[

]

=

56

;
echo $arr[somefunc($bar)];
echo $arr [ somefunc ( $bar ) ] ;
echo $arr  [  somefunc  (  $bar  )  ]  ;
echo
$arr
[
somefunc
(
$bar
)
]
;
echo

$arr

[

somefunc

(

$bar

)

]

;
$a = array_fill_keys(array('foo', 5, 10, 'bar'), 'banana');
$a = array_fill_keys(array('foo',5,10,'bar'),'banana');
$a = array_fill_keys(['foo', 5, 10, 'bar'], 'banana') ;
$a = array_fill_keys(  [  'foo'  ,  5  ,  10  ,  'bar'  ]  , 'banana'  )  ;
$secondElement = getArray()[1];
unset($arr[5]);
$arr["x"] = 42;
echo $arr[somefunc($bar)];
$test = $array[foo];

$this->long->expression->before->array->statesArray[
  $state->getCirculationStateId()
] = $state->getName();
$arr[ ] = 1;
$arr{"x"} = 42;
[ $a, $b ] = [ 1, 2 ];
$helpers = [
    'Lazy',
    'Form' =>
        [
            'templates' => 'app_form',
            'widgets' =>
                [
                    'select' => ['App\\View\\Widget\\SelectBoxWidget'],
                    'nestingLabel' => ['App\\View\\Widget\\NestingLabelWidget']
                ]
        ],
    'MagicMenu.MagicMenu'
];

$data = [


    'value',
    'value',


    // a comment
    'value',
    'value'


];

$arr = [
    'niveisFederativos' =>
        app(NiveisFederativosRepository::class)
            ->allOrderBy('nome')
            ->pluck('nome', 'id'),

    'tiposLeis' =>
        app(TiposLeisRepository::class)
            ->allOrderBy('nome')
            ->pluck('nome', 'id')
];
[[$id1, $name1]] = $data;
[[$id1], [$id2], [$id]] = $data;
[[$veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongValue, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongOtherValue]] = $data;
["id" => $id1, "name" => $name1] = $data;
[["id" => $id1, "name" => $name1]] = $data;
[["veryVeryVeryVeryLongKey" => $veryVeryVeryVeryLongValue, "veryVeryVeryVeryLongOtherKey" => $veryVeryVeryVeryLongValue]] = $data;
$arr = [
    'niveisFederativos' =>
        function () {
            return "value";
        },

    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongKey' =>
        function () {
            return "other-value";
        }
];

$singleLine = [ 'do' => [ 'collapse' => 'this' ]];
$singleLine = array('do' => array('collapse' => 'this'));

$multiline = [
  'do' => [
    'not' => 'collapse'
  ]
];
$multiline = ['do' => 'collapse'
];
$multiline = array('do' => 'collapse'
);

$mixed = [
  'only' => [ 'partly' => 'collapsed' ]
];
$mixed = [ 'only' => [
  'partly' => ['coll', 'apsed']
]];

$arr = array($var
);
$arr = array(
$var);
$arr = [$var
];
$arr = [
$var];
$arr = [$foo => $bar];
$arr = [$foo =>
$bar];

$collapse = [
  "not",
  "associative"
];
$collapse = ["not", "associative"
];

$array = [
    'key-one' => true ? 1 : 2,
    'key-two' => 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' ? 1 : 2,
    'key-two' => true ? 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' : 2,
    'key-two' => true ? 1 : 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString',
    'key-two' => 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
        'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'
        ? 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
            'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'
        : 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
            'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString',
];

$array = [
    'key' => 1,
    'key' => 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,
    'key' => 'string',
    'key' => __LINE__,
    'key' => "string \${var} {$var}",
    'key' => 'string
string
              string',
    'key' => 'string' . 'other-string',
    'key' => 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
        'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString',
];

$array = [
'string
string
string'
];

$array = [
'string
string
string',
'string
string
string'
];

$array = [
    'key' => 'string
string
string',
    'other-key' => 'string
string
string'
];

$array = [
    'string
string
string' => 'value',
    'string
string
string
other' => 'other-value'
];

$array = [
    'string
string
string' => 'string
string
string',
    'string
string
string
other' => 'string
string
string'
];

$wp_admin_bar->add_menu(array(
    'id' => 'menu-toggle',
    'title' =>
        '<span class="ab-icon"></span><span class="screen-reader-text">' .
        __('Menu') .
        '</span>',
    'href' => '#'
));

$k = [
    "blablah" => "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
    "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
    "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf"
];

$o = [
    "somethingThatsAReallyLongPropName" =>
        $obj->props->cardType === $AwesomizerCardEnum->SEEFIRST,
];

// spread
$var = ['banana', 'orange', ...$parts, 'watermelon'];
$var = [...$arr1];
$var = [0, ...$arr1];
$var = array(...$arr1, ...$arr2, 111);
$var = [...$arr1, ...$arr1];
$var = [...getArr(), 'c'];
$var = [...new ArrayIterator(['a', 'b', 'c'])];

=====================================output=====================================
<?php

$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$test = [1, 2, 3, 4, "test"];
$other_test = [1, 2, 123.4324, $hi];
$keyed_test = ["one" => 123, "two" => $other];
$keyed_test = ["one" => 123, "two" => $other];
$keyed_test = ["one" => 123, "two" => $other];
$keyed_test = [
    "one" => 123,
    "two" => $other,
];
$keyed_test = [
    "one" => 123,
    "two" => $other,
];
$keyed_test = [
    "one" => 123,
    "two" => $other,
];
$keyed_test = [
    "one" => 123,

    "two" => $other,
];
$keyed_test = ["one" => 123, "two" => $other];
$keyed_test = ["one" => 123, "two" => $other];
$keyed_test = ["one" => 123, "two" => $other];
$keyed_test = [
    "one" => 123,
    "two" => $other,
];
$keyed_test = [
    "one" => 123,
    "two" => $other,
];
$keyed_test = [
    "one" => 123,
    "two" => $other,
];
$keyed_test = [
    "one" => 123,

    "two" => $other,
];
$short_keyed_test = [
    "reallyreallyreallyreallylongkey" => 1248,
    "otherkey" => 234,
    "one more" => $hi,
];
$short_keyed_test = [
    "reallyreallyreallyreallylongkey" => 1248,
    "otherkey" => 234,
    "one more" => $hi,
];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$array = [
    1 => "a",
    "1" => "b",
    1.5 => "c",
    true => "d",
];
$array = ["a", "b", 6 => "c", "d"];
$array = [
    "foo" => "bar",
    42 => 24,
    "multi" => [
        "dimensional" => [
            "array" => "foo",
        ],
    ],
];
$secondElement = getArray()[1];
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
$a = array_fill_keys(["foo", 5, 10, "bar"], "banana");
$a = array_fill_keys(["foo", 5, 10, "bar"], "banana");
$a = array_fill_keys(["foo", 5, 10, "bar"], "banana");
$a = array_fill_keys(["foo", 5, 10, "bar"], "banana");
$secondElement = getArray()[1];
unset($arr[5]);
$arr["x"] = 42;
echo $arr[somefunc($bar)];
$test = $array[foo];

$this->long->expression->before->array->statesArray[
    $state->getCirculationStateId()
] = $state->getName();
$arr[] = 1;
$arr["x"] = 42;
[$a, $b] = [1, 2];
$helpers = [
    "Lazy",
    "Form" => [
        "templates" => "app_form",
        "widgets" => [
            "select" => ["App\\View\\Widget\\SelectBoxWidget"],
            "nestingLabel" => ["App\\View\\Widget\\NestingLabelWidget"],
        ],
    ],
    "MagicMenu.MagicMenu",
];

$data = [
    "value",
    "value",

    // a comment
    "value",
    "value",
];

$arr = [
    "niveisFederativos" => app(NiveisFederativosRepository::class)
        ->allOrderBy("nome")
        ->pluck("nome", "id"),

    "tiposLeis" => app(TiposLeisRepository::class)
        ->allOrderBy("nome")
        ->pluck("nome", "id"),
];
[[$id1, $name1]] = $data;
[[$id1], [$id2], [$id]] = $data;
[
    [
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongValue,
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongOtherValue,
    ],
] = $data;
["id" => $id1, "name" => $name1] = $data;
[["id" => $id1, "name" => $name1]] = $data;
[
    [
        "veryVeryVeryVeryLongKey" => $veryVeryVeryVeryLongValue,
        "veryVeryVeryVeryLongOtherKey" => $veryVeryVeryVeryLongValue,
    ],
] = $data;
$arr = [
    "niveisFederativos" => function () {
        return "value";
    },

    "veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongKey" => function () {
        return "other-value";
    },
];

$singleLine = ["do" => ["collapse" => "this"]];
$singleLine = ["do" => ["collapse" => "this"]];

$multiline = [
    "do" => [
        "not" => "collapse",
    ],
];
$multiline = ["do" => "collapse"];
$multiline = ["do" => "collapse"];

$mixed = [
    "only" => ["partly" => "collapsed"],
];
$mixed = [
    "only" => [
        "partly" => ["coll", "apsed"],
    ],
];

$arr = [$var];
$arr = [$var];
$arr = [$var];
$arr = [$var];
$arr = [$foo => $bar];
$arr = [$foo => $bar];

$collapse = ["not", "associative"];
$collapse = ["not", "associative"];

$array = [
    "key-one" => true ? 1 : 2,
    "key-two" => "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
        ? 1
        : 2,
    "key-two" => true
        ? "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
        : 2,
    "key-two" => true
        ? 1
        : "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
    "key-two" =>
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
            ? "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
                "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
            : "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
                "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
];

$array = [
    "key" => 1,
    "key" => 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,
    "key" => "string",
    "key" => __LINE__,
    "key" => "string \${var} {$var}",
    "key" => 'string
string
              string',
    "key" => "string" . "other-string",
    "key" =>
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
];

$array = [
    'string
string
string',
];

$array = [
    'string
string
string',
    'string
string
string',
];

$array = [
    "key" => 'string
string
string',
    "other-key" => 'string
string
string',
];

$array = [
    'string
string
string' => "value",
    'string
string
string
other' => "other-value",
];

$array = [
    'string
string
string' => 'string
string
string',
    'string
string
string
other' => 'string
string
string',
];

$wp_admin_bar->add_menu([
    "id" => "menu-toggle",
    "title" =>
        '<span class="ab-icon"></span><span class="screen-reader-text">' .
        __("Menu") .
        "</span>",
    "href" => "#",
]);

$k = [
    "blablah" =>
        "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
        "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
        "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf",
];

$o = [
    "somethingThatsAReallyLongPropName" =>
        $obj->props->cardType === $AwesomizerCardEnum->SEEFIRST,
];

// spread
$var = ["banana", "orange", ...$parts, "watermelon"];
$var = [...$arr1];
$var = [0, ...$arr1];
$var = [...$arr1, ...$arr2, 111];
$var = [...$arr1, ...$arr1];
$var = [...getArr(), "c"];
$var = [...new ArrayIterator(["a", "b", "c"])];

================================================================================
`;

exports[`arrays.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.3"
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

$test = array(1, 2, 3, 4, "test");
$test = array(1,2,3,4,"test");
$test = array( 1 , 2 , 3 , 4 , "test" ) ;
$test = array(  1  ,  2  ,  3  ,  4  ,  "test"  )  ;
$test = array(
    1,
    2,
    3,
    4,
    "test"
);
$test =
    array(
    1,
    2,
    3,
    4,
    "test"
    );
$test =
array(
1,
2,
3,
4,
"test"
)
;
$test =

array

(

1,

2,

3,

4,

"test"

)

;
$test = [1, 2, 3, 4, "test"];
$test = [1,2,3,4,"test"];
$test = [ 1 , 2 , 3 , 4 , "test" ] ;
$test = [  1  ,  2  ,  3  ,  4  ,  "test"  ]  ;
$test = [
    1,
    2,
    3,
    4,
    "test"
];
$test =
    [
        1,
        2,
        3,
        4,
        "test"
    ];
$test =
[
1,
2,
3,
4,
"test"
]
;
$test =

[

1,

2,

3,

4,

"test"

]

;
$other_test = [1, 2, 123.4324, $hi];
$keyed_test = array('one' => 123, 'two' => $other);
$keyed_test = array('one'=>123,'two'=>$other);
$keyed_test = array  (  'one'  =>  123  ,  'two'  =>  $other  )  ;
$keyed_test = array(
    'one' => 123,
    'two' => $other
);
$keyed_test =
    array(
        'one' => 123,
        'two' => $other
    );
$keyed_test
=
array
(
'one'
=>
123,
'two'
=>
$other
)
;
$keyed_test

=

array

(

'one'

=>

123,

'two'

=>

$other

)

;
$keyed_test = ['one' => 123, 'two' => $other];
$keyed_test = ['one'=>123,'two'=>$other];
$keyed_test = [  'one'  =>  123  ,  'two'  =>  $other  ]  ;
$keyed_test = [
    'one' => 123,
    'two' => $other
];
$keyed_test =
    [
        'one' => 123,
        'two' => $other
    ];
$keyed_test
=
[
'one'
=>
123,
'two'
=>
$other
]
;
$keyed_test

=

[

'one'

=>

123,

'two'

=>

$other

]

;
$short_keyed_test = array('reallyreallyreallyreallylongkey' => 1248, 'otherkey' => 234, 'one more' => $hi);
$short_keyed_test = ['reallyreallyreallyreallylongkey' => 1248, 'otherkey' => 234, 'one more' => $hi];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ] [ 6 ] ;
$foo = $bar  [  1  ]  [  2  ]  [  3  ]  [  4  ]  [  5  ]  [  6  ]  ;
$foo = $bar
[
1
]
[
2
]
[
3
]
[
4
]
[
5
]
[
6
]
;
$foo = $bar

[

1

]

[

2

]

[

3

]

[

4

]

[

5

]

[

6

]

;
$array = array(
    1    => "a",
    "1"  => "b",
    1.5  => "c",
    true => "d",
);
$array = array(
    "a",
    "b",
    6 => "c",
    "d",
);
$array = array(
    "foo" => "bar",
    42    => 24,
    "multi" => array(
        "dimensional" => array(
            "array" => "foo"
        )
    )
);
$secondElement = getArray()[1];
$arr[] = 56;
$arr[ ] = 56;
$arr[  ] = 56;
$arr
[
]
=
56
;
$arr

[

]

=

56

;
echo $arr[somefunc($bar)];
echo $arr [ somefunc ( $bar ) ] ;
echo $arr  [  somefunc  (  $bar  )  ]  ;
echo
$arr
[
somefunc
(
$bar
)
]
;
echo

$arr

[

somefunc

(

$bar

)

]

;
$a = array_fill_keys(array('foo', 5, 10, 'bar'), 'banana');
$a = array_fill_keys(array('foo',5,10,'bar'),'banana');
$a = array_fill_keys(['foo', 5, 10, 'bar'], 'banana') ;
$a = array_fill_keys(  [  'foo'  ,  5  ,  10  ,  'bar'  ]  , 'banana'  )  ;
$secondElement = getArray()[1];
unset($arr[5]);
$arr["x"] = 42;
echo $arr[somefunc($bar)];
$test = $array[foo];

$this->long->expression->before->array->statesArray[
  $state->getCirculationStateId()
] = $state->getName();
$arr[ ] = 1;
$arr{"x"} = 42;
[ $a, $b ] = [ 1, 2 ];
$helpers = [
    'Lazy',
    'Form' =>
        [
            'templates' => 'app_form',
            'widgets' =>
                [
                    'select' => ['App\\View\\Widget\\SelectBoxWidget'],
                    'nestingLabel' => ['App\\View\\Widget\\NestingLabelWidget']
                ]
        ],
    'MagicMenu.MagicMenu'
];

$data = [


    'value',
    'value',


    // a comment
    'value',
    'value'


];

$arr = [
    'niveisFederativos' =>
        app(NiveisFederativosRepository::class)
            ->allOrderBy('nome')
            ->pluck('nome', 'id'),

    'tiposLeis' =>
        app(TiposLeisRepository::class)
            ->allOrderBy('nome')
            ->pluck('nome', 'id')
];
[[$id1, $name1]] = $data;
[[$id1], [$id2], [$id]] = $data;
[[$veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongValue, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongOtherValue]] = $data;
["id" => $id1, "name" => $name1] = $data;
[["id" => $id1, "name" => $name1]] = $data;
[["veryVeryVeryVeryLongKey" => $veryVeryVeryVeryLongValue, "veryVeryVeryVeryLongOtherKey" => $veryVeryVeryVeryLongValue]] = $data;
$arr = [
    'niveisFederativos' =>
        function () {
            return "value";
        },

    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongKey' =>
        function () {
            return "other-value";
        }
];

$singleLine = [ 'do' => [ 'collapse' => 'this' ]];
$singleLine = array('do' => array('collapse' => 'this'));

$multiline = [
  'do' => [
    'not' => 'collapse'
  ]
];
$multiline = ['do' => 'collapse'
];
$multiline = array('do' => 'collapse'
);

$mixed = [
  'only' => [ 'partly' => 'collapsed' ]
];
$mixed = [ 'only' => [
  'partly' => ['coll', 'apsed']
]];

$arr = array($var
);
$arr = array(
$var);
$arr = [$var
];
$arr = [
$var];
$arr = [$foo => $bar];
$arr = [$foo =>
$bar];

$collapse = [
  "not",
  "associative"
];
$collapse = ["not", "associative"
];

$array = [
    'key-one' => true ? 1 : 2,
    'key-two' => 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' ? 1 : 2,
    'key-two' => true ? 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' : 2,
    'key-two' => true ? 1 : 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString',
    'key-two' => 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
        'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'
        ? 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
            'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'
        : 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
            'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString',
];

$array = [
    'key' => 1,
    'key' => 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,
    'key' => 'string',
    'key' => __LINE__,
    'key' => "string \${var} {$var}",
    'key' => 'string
string
              string',
    'key' => 'string' . 'other-string',
    'key' => 'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
        'VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString',
];

$array = [
'string
string
string'
];

$array = [
'string
string
string',
'string
string
string'
];

$array = [
    'key' => 'string
string
string',
    'other-key' => 'string
string
string'
];

$array = [
    'string
string
string' => 'value',
    'string
string
string
other' => 'other-value'
];

$array = [
    'string
string
string' => 'string
string
string',
    'string
string
string
other' => 'string
string
string'
];

$wp_admin_bar->add_menu(array(
    'id' => 'menu-toggle',
    'title' =>
        '<span class="ab-icon"></span><span class="screen-reader-text">' .
        __('Menu') .
        '</span>',
    'href' => '#'
));

$k = [
    "blablah" => "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
    "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
    "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf"
];

$o = [
    "somethingThatsAReallyLongPropName" =>
        $obj->props->cardType === $AwesomizerCardEnum->SEEFIRST,
];

// spread
$var = ['banana', 'orange', ...$parts, 'watermelon'];
$var = [...$arr1];
$var = [0, ...$arr1];
$var = array(...$arr1, ...$arr2, 111);
$var = [...$arr1, ...$arr1];
$var = [...getArr(), 'c'];
$var = [...new ArrayIterator(['a', 'b', 'c'])];

=====================================output=====================================
<?php

$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$test = array(1, 2, 3, 4, "test");
$other_test = array(1, 2, 123.4324, $hi);
$keyed_test = array("one" => 123, "two" => $other);
$keyed_test = array("one" => 123, "two" => $other);
$keyed_test = array("one" => 123, "two" => $other);
$keyed_test = array(
    "one" => 123,
    "two" => $other,
);
$keyed_test = array(
    "one" => 123,
    "two" => $other,
);
$keyed_test = array(
    "one" => 123,
    "two" => $other,
);
$keyed_test = array(
    "one" => 123,

    "two" => $other,
);
$keyed_test = array("one" => 123, "two" => $other);
$keyed_test = array("one" => 123, "two" => $other);
$keyed_test = array("one" => 123, "two" => $other);
$keyed_test = array(
    "one" => 123,
    "two" => $other,
);
$keyed_test = array(
    "one" => 123,
    "two" => $other,
);
$keyed_test = array(
    "one" => 123,
    "two" => $other,
);
$keyed_test = array(
    "one" => 123,

    "two" => $other,
);
$short_keyed_test = array(
    "reallyreallyreallyreallylongkey" => 1248,
    "otherkey" => 234,
    "one more" => $hi,
);
$short_keyed_test = array(
    "reallyreallyreallyreallylongkey" => 1248,
    "otherkey" => 234,
    "one more" => $hi,
);
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$foo = $bar[1][2][3][4][5][6];
$array = array(
    1 => "a",
    "1" => "b",
    1.5 => "c",
    true => "d",
);
$array = array("a", "b", 6 => "c", "d");
$array = array(
    "foo" => "bar",
    42 => 24,
    "multi" => array(
        "dimensional" => array(
            "array" => "foo",
        ),
    ),
);
$secondElement = getArray()[1];
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
$arr[] = 56;
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
echo $arr[somefunc($bar)];
$a = array_fill_keys(array("foo", 5, 10, "bar"), "banana");
$a = array_fill_keys(array("foo", 5, 10, "bar"), "banana");
$a = array_fill_keys(array("foo", 5, 10, "bar"), "banana");
$a = array_fill_keys(array("foo", 5, 10, "bar"), "banana");
$secondElement = getArray()[1];
unset($arr[5]);
$arr["x"] = 42;
echo $arr[somefunc($bar)];
$test = $array[foo];

$this->long->expression->before->array->statesArray[
    $state->getCirculationStateId()
] = $state->getName();
$arr[] = 1;
$arr["x"] = 42;
[$a, $b] = array(1, 2);
$helpers = array(
    "Lazy",
    "Form" => array(
        "templates" => "app_form",
        "widgets" => array(
            "select" => array("App\\View\\Widget\\SelectBoxWidget"),
            "nestingLabel" => array("App\\View\\Widget\\NestingLabelWidget"),
        ),
    ),
    "MagicMenu.MagicMenu",
);

$data = array(
    "value",
    "value",

    // a comment
    "value",
    "value",
);

$arr = array(
    "niveisFederativos" => app(NiveisFederativosRepository::class)
        ->allOrderBy("nome")
        ->pluck("nome", "id"),

    "tiposLeis" => app(TiposLeisRepository::class)
        ->allOrderBy("nome")
        ->pluck("nome", "id"),
);
[[$id1, $name1]] = $data;
[[$id1], [$id2], [$id]] = $data;
[
    [
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongValue,
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongOtherValue,
    ],
] = $data;
["id" => $id1, "name" => $name1] = $data;
[["id" => $id1, "name" => $name1]] = $data;
[
    [
        "veryVeryVeryVeryLongKey" => $veryVeryVeryVeryLongValue,
        "veryVeryVeryVeryLongOtherKey" => $veryVeryVeryVeryLongValue,
    ],
] = $data;
$arr = array(
    "niveisFederativos" => function () {
        return "value";
    },

    "veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongKey" => function () {
        return "other-value";
    },
);

$singleLine = array("do" => array("collapse" => "this"));
$singleLine = array("do" => array("collapse" => "this"));

$multiline = array(
    "do" => array(
        "not" => "collapse",
    ),
);
$multiline = array("do" => "collapse");
$multiline = array("do" => "collapse");

$mixed = array(
    "only" => array("partly" => "collapsed"),
);
$mixed = array(
    "only" => array(
        "partly" => array("coll", "apsed"),
    ),
);

$arr = array($var);
$arr = array($var);
$arr = array($var);
$arr = array($var);
$arr = array($foo => $bar);
$arr = array($foo => $bar);

$collapse = array("not", "associative");
$collapse = array("not", "associative");

$array = array(
    "key-one" => true ? 1 : 2,
    "key-two" => "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
        ? 1
        : 2,
    "key-two" => true
        ? "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
        : 2,
    "key-two" => true
        ? 1
        : "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
    "key-two" =>
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
            ? "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
                "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
            : "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
                "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
);

$array = array(
    "key" => 1,
    "key" => 1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,
    "key" => "string",
    "key" => __LINE__,
    "key" => "string \${var} {$var}",
    "key" => 'string
string
              string',
    "key" => "string" . "other-string",
    "key" =>
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
        "VeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
);

$array = array(
    'string
string
string',
);

$array = array(
    'string
string
string',
    'string
string
string',
);

$array = array(
    "key" => 'string
string
string',
    "other-key" => 'string
string
string',
);

$array = array(
    'string
string
string' => "value",
    'string
string
string
other' => "other-value",
);

$array = array(
    'string
string
string' => 'string
string
string',
    'string
string
string
other' => 'string
string
string',
);

$wp_admin_bar->add_menu(array(
    "id" => "menu-toggle",
    "title" =>
        '<span class="ab-icon"></span><span class="screen-reader-text">' .
        __("Menu") .
        "</span>",
    "href" => "#",
));

$k = array(
    "blablah" =>
        "aldkfkladfskladklsfkladklfkaldfadfkdaf" +
        "adlfasdklfkldsklfakldsfkladsfkadsfladsfa" +
        "dflkadfkladsfklkadlfkladlfkadklfjadlfdfdaf",
);

$o = array(
    "somethingThatsAReallyLongPropName" =>
        $obj->props->cardType === $AwesomizerCardEnum->SEEFIRST,
);

// spread
$var = array("banana", "orange", ...$parts, "watermelon");
$var = array(...$arr1);
$var = array(0, ...$arr1);
$var = array(...$arr1, ...$arr2, 111);
$var = array(...$arr1, ...$arr1);
$var = array(...getArr(), "c");
$var = array(...new ArrayIterator(array("a", "b", "c")));

================================================================================
`;

exports[`single.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

array();

=====================================output=====================================
<?php

[];

================================================================================
`;

exports[`single.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.3"
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

array();

=====================================output=====================================
<?php

array();

================================================================================
`;

exports[`single-short.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

[];

=====================================output=====================================
<?php

[];

================================================================================
`;

exports[`single-short.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.3"
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

[];

=====================================output=====================================
<?php

array();

================================================================================
`;
