// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array.php 1`] = `
<?php
$array = [/* comment */];
$array = [
    // comment
];
$array = [ // comment
    // comment
    1, // comment
    2 // comment
    // comment
];
$array = [ /* comment */
    /* comment */
    /* comment */ 1 /* comment */ , /* comment */
    /* comment */ 2 /* comment */
    /* comment */
    /* comment */ ];
$array = [ /* comment */
    /* comment */
    /* comment */ "foo" /* comment */ => /* comment */ "bar", /* comment */
    /* comment */ "bar" /* comment */ => /* comment */ "foo" /* comment */
    /* comment */
    /* comment */ ];
$array = [ // test
    1, 2, 3, 4, 5, 6
];
$array = [
    1, 2, 3, 4, 5, 6 // test
];
const FOO = [
  //testing
  1
];

return [
  // foo
  "bar"
];

$array = [
    'type'      => [],
    'config'    => [
        // comments in nested arrays break things
        'key' => 1,
    ],
    'accepted'  => [],
];~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$array = [
    /* comment */
];
$array = [
    // comment
];
$array = [
    // comment
    // comment
    1,
    // comment
    2 // comment
    // comment
];
$array = [
    /* comment */
    /* comment */
    /* comment */
    1, /* comment */ /* comment */
    /* comment */
    2 /* comment */
    /* comment */
    /* comment */
];
$array = [
    /* comment */
    /* comment */
    /* comment */
    "foo" => /* comment */ /* comment */
    "bar", /* comment */
    /* comment */
    "bar" => /* comment */ /* comment */
    "foo" /* comment */
    /* comment */
    /* comment */
];
$array = [
    // test
    1,
    2,
    3,
    4,
    5,
    6
];
$array = [
    1,
    2,
    3,
    4,
    5,
    6 // test
];
const FOO = [
    //testing
    1
];

return [
    // foo
    "bar"
];

$array = [
    'type' => [],
    'config' => [
        // comments in nested arrays break things
        'key' => 1
    ],
    'accepted' => []
];

`;

exports[`class.php 1`] = `
<?php
namespace Test\\test\\test;

use Some\\other\\test;

/**
 * @property \\Test\\test $test
 */
class Foo extends Bar implements Baz, Buzz {
  public $test;

  function test() {
    return "test";
  }

  public function &passByReferenceTest() {
    $a = 1;
    return $a;
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
namespace Test\\test\\test;

use Some\\other\\test;

/**
 * @property \\Test\\test $test
 */
class Foo extends Bar implements Baz, Buzz
{
    public $test;

    function test()
    {
        return "test";
    }

    public function &passByReferenceTest()
    {
        $a = 1;
        return $a;
    }
}

`;

exports[`comments.php 1`] = `
<?php
/** @var int $int This is a counter. */
$int = 0;

// there should be no docblock here
$int++;

// multi
// line
// comment
// test
$hi = 1;

/**
 * test fwd slash 12/3 comment
 */

/**
 * test backwards slash 1\\2 comment
 */

/**
 * Multi line
* test with wrong indentation
*/

/**
 * Multi line
 * test with right indentation
 */

/**
 * This class acts as an example on where to position a DocBlock.
 */
class Foo
{
    /** @var string|null $title contains a title for the Foo with a max. length of 24 characters */
    protected $title = null;

    /**
     * Sets a single-line title.
     *
     * @param string $title A text with a maximum of 24 characters.
     *
     * @return void
     */
    public function setTitle($title)
    {
        // there should be no docblock here
        $this->title = $title;
    }
}

/*********************
 * Some long comment *
 *********************/

// This is a one-line c++ style comment

/* This is a multi line comment
   yet another line of comment */

/*
This is a multiple-lines comment block
that spans over multiple
lines
*/

# This is a one-line shell-style comment


for ($i = 0; $i < 10; $i++) {
    // some comment
    $a = 1;
    $b = 2;

    while (true) {
        // Some comment
        $test = 1;
    }
}

while (true) {
  // some comment
}

do {
  // some comment
} while (true);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
/** @var int $int This is a counter. */
$int = 0;

// there should be no docblock here
$int++;

// multi
// line
// comment
// test
$hi = 1;

/**
 * test fwd slash 12/3 comment
 */

/**
 * test backwards slash 1\\2 comment
 */

/**
 * Multi line
 * test with wrong indentation
 */

/**
 * Multi line
 * test with right indentation
 */

/**
 * This class acts as an example on where to position a DocBlock.
 */
class Foo
{
    /** @var string|null $title contains a title for the Foo with a max. length of 24 characters */
    protected $title = null;

    /**
     * Sets a single-line title.
     *
     * @param string $title A text with a maximum of 24 characters.
     *
     * @return void
     */
    public function setTitle($title)
    {
        // there should be no docblock here
        $this->title = $title;
    }
}

/*********************
 * Some long comment *
 *********************/

// This is a one-line c++ style comment
/**
 * This is a multi line comment
 * yet another line of comment
 */

/**
 * This is a multiple-lines comment block
 * that spans over multiple
 * lines
 */

# This is a one-line shell-style comment

for ($i = 0; $i < 10; $i++) {

    // some comment
    $a = 1;
    $b = 2;

    while (true) {
        // Some comment
        $test = 1;
    }
}

while (true) {
    // some comment
}

do {
    // some comment
} while (true);

`;

exports[`dangling_for.php 1`] = `
<?php
for // comment
(;;);

for /* comment */(;;);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// comment
for (;;);

/* comment */
for (;;);

`;

exports[`edge_cases.php 1`] = `
<?php
class Test{
  public function testFunction (/* inline */ $arg) {
    // body
  }

  function testFunction ($arg1, /* inline */ $arg2) {

  }
}

function testFunction (/* inline */ $arg) {
  // body
}

function testFunction ($arg1, /* inline */ $arg2) {

}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
class Test
{
    public function testFunction(
        /* inline */
        $arg
    ) {
        // body
    }

    function testFunction(
        $arg1,
        /* inline */
        $arg2
    ) {

    }
}

function testFunction(
    /* inline */
    $arg
)
{
    // body
}

function testFunction(
    $arg1,
    /* inline */
    $arg2
)
{

}

`;

exports[`no_code.php 1`] = `
<?php
/**
 * Product Loop Start
 *
 * @author  WooThemes
 * @package WooCommerce/Templates
 * @version 2.0.0
 */
?>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
/**
 * Product Loop Start
 *
 * @author  WooThemes
 * @package WooCommerce/Templates
 * @version 2.0.0
 */
`;
