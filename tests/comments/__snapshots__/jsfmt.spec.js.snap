// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array.php 1`] = `
<?php
$array = [/* comment */];
$array = [
    // comment
];
$array = [ // comment
    // comment
    1, // comment
    2 // comment
    // comment
];
$array = [ /* comment */
    /* comment */
    /* comment */ 1 /* comment */ , /* comment */
    /* comment */ 2 /* comment */
    /* comment */
    /* comment */ ];
$array = [ /* comment */
    /* comment */
    /* comment */ "foo" /* comment */ => /* comment */ "bar", /* comment */
    /* comment */ "bar" /* comment */ => /* comment */ "foo" /* comment */
    /* comment */
    /* comment */ ];
$array = [ // test
    1, 2, 3, 4, 5, 6
];
$array = [
    1, 2, 3, 4, 5, 6 // test
];
const FOO = [
  //testing
  1
];

return [
  // foo
  "bar"
];

$array = [
    'type'      => [],
    'config'    => [
        // comments in nested arrays break things
        'key' => 1,
    ],
    'accepted'  => [],
];

// Comment
$array = []; // Comment
// Comment

/* Comment */
$array /* Comment */ = /* Comment */ []; /* Comment */
/* Comment */
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$array = [
    /* comment */
];
$array = [
    // comment
];
$array = [
    // comment
    // comment
    1,
    // comment
    2 // comment
    // comment
];
$array = [
    /* comment */
    /* comment */
    /* comment */
    1, /* comment */ /* comment */
    /* comment */
    2 /* comment */
    /* comment */
    /* comment */
];
$array = [
    /* comment */
    /* comment */
    /* comment */
    "foo" => /* comment */ /* comment */
    "bar", /* comment */
    /* comment */
    "bar" => /* comment */ /* comment */
    "foo" /* comment */
    /* comment */
    /* comment */
];
$array = [
    // test
    1,
    2,
    3,
    4,
    5,
    6
];
$array = [
    1,
    2,
    3,
    4,
    5,
    6 // test
];
const FOO = [
    //testing
    1
];

return [
    // foo
    "bar"
];

$array = [
    'type' => [],
    'config' => [
        // comments in nested arrays break things
        'key' => 1
    ],
    'accepted' => []
];

// Comment
$array = []; // Comment
// Comment
/* Comment */
$array = /* Comment */ /* Comment */
[]; /* Comment */
/* Comment */

`;

exports[`bin.php 1`] = `
<?php

$variable = FormUtil::isEmpty($this->modelData) ||
    // arrays, countables
    ((is_array($this->modelData) || $this->modelData instanceof \\Countable) && 0 === count($this->modelData)) ||
    // traversables that are not countable
    ($this->modelData instanceof \\Traversable && 0 === iterator_count($this->modelData));

if (2 /* MB_OVERLOAD_STRING */ & (int) ini_get('mbstring.func_overload')) {
    mb_internal_encoding('ASCII');
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$variable =
    // arrays, countables
    FormUtil::isEmpty($this->modelData) ||
    (
        (
            is_array($this->modelData) || $this->modelData instanceof \\Countable
        ) &&
        0 === count($this->modelData)
    ) ||
    // traversables that are not countable
    (
        $this->modelData instanceof \\Traversable &&
        0 === iterator_count($this->modelData)
    );

if (
    2 & /* MB_OVERLOAD_STRING */
    (int) ini_get('mbstring.func_overload')
) {
    mb_internal_encoding('ASCII');
}

`;

exports[`class.php 1`] = `
<?php
namespace Test\\test\\test;

use Some\\other\\test;

/**
 * @property \\Test\\test $test
 */
class Foo extends Bar implements Baz, Buzz {
  public $test;

  function test() {
    return "test";
  }

  public function &passByReferenceTest() {
    $a = 1;
    return $a;
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
namespace Test\\test\\test;

use Some\\other\\test;

/**
 * @property \\Test\\test $test
 */
class Foo extends Bar implements Baz, Buzz
{
    public $test;

    function test()
    {
        return "test";
    }

    public function &passByReferenceTest()
    {
        $a = 1;
        return $a;
    }
}

`;

exports[`clone.php 1`] = `
<?php

$obj2 = clone /* Comments */ $obj /* Comments */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$obj2 = clone /* Comments */
$obj; /* Comments */

`;

exports[`comments.php 1`] = `
<?php
/** @var int $int This is a counter. */
$int = 0;

// there should be no docblock here
$int++;

// multi
// line
// comment
// test
$hi = 1;

/**
 * test fwd slash 12/3 comment
 */

/**
 * test backwards slash 1\\2 comment
 */

/**
 * Multi line
* test with wrong indentation
*/

/**
 * Multi line
 * test with right indentation
 */

/**
 * This class acts as an example on where to position a DocBlock.
 */
class Foo
{
    /** @var string|null $title contains a title for the Foo with a max. length of 24 characters */
    protected $title = null;

    /**
     * Sets a single-line title.
     *
     * @param string $title A text with a maximum of 24 characters.
     *
     * @return void
     */
    public function setTitle($title)
    {
        // there should be no docblock here
        $this->title = $title;
    }
}

/*********************
 * Some long comment *
 *********************/

// This is a one-line c++ style comment

/* This is a multi line comment
   yet another line of comment */

/*
This is a multiple-lines comment block
that spans over multiple
lines
*/

# This is a one-line shell-style comment


for ($i = 0; $i < 10; $i++) {
    // some comment
    $a = 1;
    $b = 2;

    while (true) {
        // Some comment
        $test = 1;
    }
}

while (true) {
  // some comment
}

do {
  // some comment
} while (true);

$test = foo ?: bar(function () {
    $foo = "bar";
    // test
});

$constraint = new UniqueEntity(array(
    'message' => 'myMessage'
    // no "em" option set
));

return (
   // parens test
   // some comment
   $test
);

/***
 * Configures the tasks tabs (sub_menu)
 */

class Test {
  /******************************************
   * ORIGINAL SHIPPING DATA
   *****************************************/
   public $test;
}

/*
      some test

  */

  /*
  <a href="#"
      class="btn btn-info ladda-button"
      data-ui-component="unified-modal-opener"
      data-style="zoom-in"
      data-title="Title modal"
      data-size="md"
      data-header="true"
      data-footer="false"
      data-render="contact-form"
      data-view="Title"
      >
      <span class="ladda-label">Modal</span>
  </a>

  Options: data-render - contact-form, render, template-part
  */

/**
 * See http://example.com
 *
 * Some example code
 * \`\`\`php
 * $hello = 'world'; // This is a comment in a comment
 * \`\`\`
 */
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
/** @var int $int This is a counter. */
$int = 0;

// there should be no docblock here
$int++;

// multi
// line
// comment
// test
$hi = 1;

/**
 * test fwd slash 12/3 comment
 */

/**
 * test backwards slash 1\\2 comment
 */

/**
 * Multi line
 * test with wrong indentation
 */

/**
 * Multi line
 * test with right indentation
 */

/**
 * This class acts as an example on where to position a DocBlock.
 */
class Foo
{
    /** @var string|null $title contains a title for the Foo with a max. length of 24 characters */
    protected $title = null;

    /**
     * Sets a single-line title.
     *
     * @param string $title A text with a maximum of 24 characters.
     *
     * @return void
     */
    public function setTitle($title)
    {
        // there should be no docblock here
        $this->title = $title;
    }
}

/*********************
 * Some long comment *
 *********************/

// This is a one-line c++ style comment
/* This is a multi line comment
 yet another line of comment */

/*
This is a multiple-lines comment block
that spans over multiple
lines
*/

# This is a one-line shell-style comment

for ($i = 0; $i < 10; $i++) {
    // some comment
    $a = 1;
    $b = 2;

    while (true) {
        // Some comment
        $test = 1;
    }
}

while (true) {
    // some comment
}

do {
    // some comment
} while (true);

$test = foo ?: bar(function () {
        $foo = "bar";
        // test
    });

$constraint = new UniqueEntity(array(
    'message' => 'myMessage'
    // no "em" option set
));

return (
    // parens test
    // some comment
    $test
);

/***
 * Configures the tasks tabs (sub_menu)
 */

class Test
{
    /******************************************
     * ORIGINAL SHIPPING DATA
     *****************************************/
    public $test;
}

/*
      some test

  */

/*
  <a href="#"
      class="btn btn-info ladda-button"
      data-ui-component="unified-modal-opener"
      data-style="zoom-in"
      data-title="Title modal"
      data-size="md"
      data-header="true"
      data-footer="false"
      data-render="contact-form"
      data-view="Title"
      >
      <span class="ladda-label">Modal</span>
  </a>

  Options: data-render - contact-form, render, template-part
  */

/**
 * See http://example.com
 *
 * Some example code
 * \`\`\`php
 * $hello = 'world'; // This is a comment in a comment
 * \`\`\`
 */

`;

exports[`do.php 1`] = `
<?php
// Comment
do { // Comment
    // Comment
    echo $i; // Comment
    // Comment
} while ($i > 0); // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
do {
    // Comment
    // Comment
    echo $i; // Comment
    // Comment
} while ($i > 0); // Comment

`;

exports[`echo.php 1`] = `
<?php

// Comment
echo // Comment
    $foo, // Comment
    $bar // Comment
; // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
echo // Comment
$foo,
    // Comment
$bar; // Comment // Comment

`;

exports[`edge_cases.php 1`] = `
<?php
class Test{
  public function testFunction (/* inline */ $arg) {
    // body
  }

  function testFunction ($arg1, /* inline */ $arg2) {

  }
}

function testFunction (/* inline */ $arg) {
  // body
}

function testFunction ($arg1, /* inline */ $arg2) {

}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
class Test
{
    public function testFunction(
        /* inline */
        $arg
    ) {
        // body
    }

    function testFunction(
        $arg1,
        /* inline */
        $arg2
    ) {

    }
}

function testFunction(
    /* inline */
    $arg
) {
    // body
}

function testFunction(
    $arg1,
    /* inline */
    $arg2
) {

}

`;

exports[`empty.php 1`] = `
<?php

if (empty(/* Comment */ [] /* Comment */)) {
    echo "Foo";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
if (
    empty(
        /* Comment */
        [] /* Comment */
    )
) {
    echo "Foo";
}

`;

exports[`for.php 1`] = `
<?php
for // Comment
(;;);

for /* Comment */(;;);

// Comment
for ($i = 1; $i <= 10; $i++) { // Comment
    // Comment
    echo $i; // Comment
    // Comment
} // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
for (;;);

/* Comment */
for (;;);

// Comment
for ($i = 1; $i <= 10; $i++) {
    // Comment
    // Comment
    echo $i; // Comment
    // Comment
} // Comment

`;

exports[`foreach.php 1`] = `
<?php
// Comment
foreach ($iterable as $value) { // Comment
    // Comment
    echo 'Foo'; // Comment
    // Comment
} // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
foreach ($iterable as $value) {
    // Comment
    // Comment
    echo 'Foo'; // Comment
    // Comment
} // Comment

`;

exports[`functions.php 1`] = `
<?php

function foo(/* comment */ $a /* comment */ = /* comment */ 1 /* comment */): /* comment */ ?string /* comment */ {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
function foo(
    /* comment */
    $a
        = /* comment */
        /* comment */
        1 /* comment */ /* comment */
): ?string {
    /* comment */

}

`;

exports[`global.php 1`] = `
<?php

global /* Comment */ $a /* Comment */, /* Comment */ $b /* Comment */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
global /* Comment */
    $a, /* Comment */
    /* Comment */
    $b; /* Comment */

`;

exports[`if.php 1`] = `
<?php
// Comment
if (1) { // Comment
    // Comment
    echo "Foo"; // Comment
    // Comment
} elseif (2) { // Comment
    // Comment
    echo "Bar";
    // Comment
} else { // Comment
    // Comment
    echo "FooBar";
    // Comment
} // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
if (1) {
    // Comment
    // Comment
    echo "Foo"; // Comment
    // Comment
} elseif (2) {
    // Comment
    // Comment
    echo "Bar";
    // Comment
} else {
    // Comment
    // Comment
    echo "FooBar";
    // Comment
} // Comment

`;

exports[`include.php 1`] = `
<?php
// Comment
include // Comment
    // Comment
    "test.php" // Comment
    // Comment
; // Comment

// Comment
include (// Comment
    // Comment
"test.php" // Comment
    // Comment
); // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
include // Comment
// Comment
"test.php"; // Comment // Comment
// Comment
// Comment
include // Comment
    // Comment
    "test.php"; // Comment
    // Comment // Comment

`;

exports[`isset.php 1`] = `
<?php

if (isset(/* Comment */ $a[1]/* Comment */)) {
    echo "Foo";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
if (
    isset(
        /* Comment */
        $a[1] /* Comment */
    )
) {
    echo "Foo";
}

`;

exports[`list.php 1`] = `
<?php

list(/* Comment */ $drink /* Comment */ , /* Comment */ $color /* Comment */, /* Comment */ $power /* Comment */) = $info;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
list(
    /* Comment */
    $drink, /* Comment */
    /* Comment */
    $color, /* Comment */
    /* Comment */
    $power /* Comment */
) = $info;

`;

exports[`method.php 1`] = `
<?php

class Foo {
    public function foo(/* comment */ $a /* comment */ = /* comment */ 1 /* comment */): /* comment */ ?string /* comment */ {}
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
class Foo
{
    public function foo(
        /* comment */
        $a
            = /* comment */
            /* comment */
            1 /* comment */ /* comment */
    ): ?string {
        /* comment */

    }
}

`;

exports[`no_code.php 1`] = `
<?php
/**
 * Product Loop Start
 *
 * @author  WooThemes
 * @package WooCommerce/Templates
 * @version 2.0.0
 */
?>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
/**
 * Product Loop Start
 *
 * @author  WooThemes
 * @package WooCommerce/Templates
 * @version 2.0.0
 */
`;

exports[`static.php 1`] = `
<?php
static /* Comment */ $a /* Comment */, /* Comment */ $b /* Comment */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
static /* Comment */
    $a, /* Comment */
    /* Comment */
    $b; /* Comment */

`;

exports[`print.php 1`] = `
<?php

print // Comment
    $foo
    /* Comment */
    ;

print /* Comment */ $foo /* Comment */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
print // Comment
$foo;
/* Comment */
print /* Comment */
$foo; /* Comment */

`;

exports[`offsetlookup.php 1`] = `
<?php

echo /*Comment*/$a/*Comment*/[/*Comment*/1/*Comment*/]/*Comment*/;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
echo /*Comment*/
/*Comment*/
$a[/*Comment*/
    1]; /*Comment*/ /*Comment*/

`;

exports[`propertylookup.php 1`] = `
<?php

echo $a/*Comment*/->/*Comment*/bar();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
echo /*Comment*/
/*Comment*/
$a->bar();

`;

exports[`staticlookup.php 1`] = `
<?php

echo Foo/*Comment*/::/*Comment*/bar();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
echo /*Comment*/
/*Comment*/
Foo::bar();

`;

exports[`switch.php 1`] = `
<?php
// Comment
switch ($i) { // Comment
    // Comment
    case 0: // Comment
        // Comment
        echo "i equals 0"; // Comment
        // Comment
        break; // Comment
        // Comment
    case 1: // Comment
        // Comment
        echo "i equals 1"; // Comment
        break; // Comment
        // Comment
} // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
switch ($i) {
    // Comment
    // Comment
    case 0: // Comment
        // Comment
        echo "i equals 0"; // Comment
        // Comment
        break; // Comment
    // Comment
    case 1: // Comment
        // Comment
        echo "i equals 1";
        // Comment
        break; // Comment
    // Comment
} // Comment

`;

exports[`throw.php 1`] = `
<?php

// Comment
throw new ClassName( // Comment
    1, // Comment
    // Comment
    2 // Comment
); // Comment

/* Comment */
throw new ClassName( /* Comment */
    /* Comment */ 1, /* Comment */
    /* Comment */
    /* Comment */ 2 /* Comment */
    /* Comment */); /* Comment */
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
throw new ClassName(// Comment
1, // Comment // Comment
2); // Comment // Comment

/* Comment */
throw new ClassName(/* Comment */ /* Comment */
1, /* Comment */ /* Comment */
/* Comment */
2); /* Comment */
/* Comment */ /* Comment */

`;

exports[`unset.php 1`] = `
<?php

unset(/* Comment */ $foo /* Comment */);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
unset(
    /* Comment */
    $foo /* Comment */
);

`;

exports[`while.php 1`] = `
<?php
// Comment 1
while (true) { // Comment 2
    // Comment 3
    echo 'Foo'; // Comment 4
    // Comment 5
} // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment 1
while (true) {
    // Comment 2
    // Comment 3
    echo 'Foo'; // Comment 4
    // Comment 5
} // Comment

`;
