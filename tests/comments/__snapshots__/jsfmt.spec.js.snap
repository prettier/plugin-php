// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array.php - php-verify: array.php 1`] = `
<?php
$array = [/* comment */];
$array = [
    // comment
];
$array = [ // comment
    // comment
    1, // comment
    2 // comment
    // comment
];
$array = [ /* comment */
    /* comment */
    /* comment */ 1 /* comment */ , /* comment */
    /* comment */ 2 /* comment */
    /* comment */
    /* comment */ ];
$array = [ /* comment */
    /* comment */
    /* comment */ "foo" /* comment */ => /* comment */ "bar", /* comment */
    /* comment */ "bar" /* comment */ => /* comment */ "foo" /* comment */
    /* comment */
    /* comment */ ];
$array = [ // test
    1, 2, 3, 4, 5, 6
];
$array = [
    1, 2, 3, 4, 5, 6 // test
];
const FOO = [
  //testing
  1
];

return [
  // foo
  "bar"
];

$array = [
    'type'      => [],
    'config'    => [
        // comments in nested arrays break things
        'key' => 1,
    ],
    'accepted'  => [],
];

// Comment
$array = []; // Comment
// Comment

/* Comment */
$array /* Comment */ = /* Comment */ []; /* Comment */
/* Comment */

$array = [
    'key' =>
        // Comment A
        // Comment B
        'string'
];

$array = [
     'key' => // Comment A
        // Comment B
         'string'
];

$array = [
    'key' => // Comment A
        'string'
];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$array = [
    /* comment */
];
$array = [
    // comment
];
$array = [
    // comment
    // comment
    1, // comment
    2 // comment
    // comment
];
$array = [
    /* comment */
    /* comment */
    /* comment */ 1 /* comment */ /* comment */,
    /* comment */ 2 /* comment */
    /* comment */
    /* comment */
];
$array = [
    /* comment */
    /* comment */
    /* comment */ "foo" /* comment */ => /* comment */ "bar" /* comment */,
    /* comment */ "bar" /* comment */ => /* comment */ "foo" /* comment */
    /* comment */
    /* comment */
];
$array = [
    // test
    1,
    2,
    3,
    4,
    5,
    6
];
$array = [
    1,
    2,
    3,
    4,
    5,
    6 // test
];
const FOO = [
    //testing
    1
];

return [
    // foo
    "bar"
];

$array = [
    'type' => [],
    'config' => [
        // comments in nested arrays break things
        'key' => 1
    ],
    'accepted' => []
];

// Comment
$array = []; // Comment
// Comment

/* Comment */
$array /* Comment */ = /* Comment */ []; /* Comment */
/* Comment */

$array = [
    'key' =>
        // Comment A
        // Comment B
        'string'
];

$array = [
    // Comment A
    'key' =>
        // Comment B
        'string'
];

$array = [
    // Comment A
    'key' => 'string'
];

`;

exports[`assign.php - php-verify: assign.php 1`] = `
<?php
$var =
    // Comment
    'some' . 'long' . 'string';

$var =
    // Comment

    'some' . 'long' . 'string';

$var =

    // Comment

    'some' . 'long' . 'string';

$var =
    /* comment */
    'some' . 'long' . 'string';

$var =
    /**
     * multi-line
     */
    'some' . 'long' . 'string';

$var =
    /* inline */ 'some' . 'long' . 'string' . 'some' . 'long' . 'string' . 'some' . 'long' . 'string' . 'some' . 'long' . 'string';

$var = // Comment
    // Comment
    'some' . 'long' . 'string';

$var = // Comment
    'some' . 'long' . 'string';

$var = /* Comment */
    // Comment
    'some' . 'long' . 'string';

$var = // Comment/
    /* Comment */
    'some' . 'long' . 'string';

$var = /* Comment */
    /* Comment */'some' .
    'long' .
    'string';

// Comment
$var =
// Comment
$var1 =
// Comment
$var2 =
// Comment
$var3;

// Comment
$var =
// Comment
$var1 =
// Comment
$var2 =
// Comment
$var3;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$var =
    // Comment
    'some' . 'long' . 'string';

$var =
    // Comment

    'some' . 'long' . 'string';

$var =
    // Comment

    'some' . 'long' . 'string';

$var =
    /* comment */
    'some' . 'long' . 'string';

$var =
    /**
     * multi-line
     */
    'some' . 'long' . 'string';

$var =
    /* inline */ 'some' .
    'long' .
    'string' .
    'some' .
    'long' .
    'string' .
    'some' .
    'long' .
    'string' .
    'some' .
    'long' .
    'string';

$var = // Comment
    // Comment
    'some' . 'long' . 'string';

$var = 'some' . 'long' . 'string'; // Comment

$var /* Comment */ =
    // Comment
    'some' . 'long' . 'string';

$var = // Comment/
    /* Comment */
    'some' . 'long' . 'string';

$var /* Comment */ = /* Comment */ 'some' . 'long' . 'string';

// Comment
$var =
    // Comment
    $var1 =
        // Comment
        $var2 =
            // Comment
            $var3;

// Comment
$var =
    // Comment
    $var1 =
        // Comment
        $var2 =
            // Comment
            $var3;

`;

exports[`bin.php - php-verify: bin.php 1`] = `
<?php

$variable = FormUtil::isEmpty($this->modelData) ||
    // arrays, countables
    ((is_array($this->modelData) || $this->modelData instanceof \\Countable) && 0 === count($this->modelData)) ||
    // traversables that are not countable
    ($this->modelData instanceof \\Traversable && 0 === iterator_count($this->modelData));

if (2 /* MB_OVERLOAD_STRING */ & (int) ini_get('mbstring.func_overload')) {
    mb_internal_encoding('ASCII');
}

$bool = /*Comment */ true /*Comment */ || /*Comment */ false /*Comment */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$variable =
    // arrays, countables
    FormUtil::isEmpty($this->modelData) ||
    ((is_array($this->modelData) || $this->modelData instanceof \\Countable) &&
        0 === count($this->modelData)) ||
    // traversables that are not countable
    ($this->modelData instanceof \\Traversable &&
        0 === iterator_count($this->modelData));

if (2 /* MB_OVERLOAD_STRING */ & (int) ini_get('mbstring.func_overload')) {
    mb_internal_encoding('ASCII');
}

$bool = /*Comment */ true /*Comment */ || /*Comment */ false /*Comment */;

`;

exports[`blank_lines.php - php-verify: blank_lines.php 1`] = `
<?php

// The first line of a comment
// The second line of a comment

// A third line which has a blank line before it


// Other comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php


// The first line of a comment
// The second line of a comment

// A third line which has a blank line before it

// Other comment


`;

exports[`break.php - php-verify: break.php 1`] = `
<?php

for (;;) {
    break /* Comment */;
}

loop: for (;;) {
    break /* Comment */ 1;
    break 1 /* Comment */;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

for (;;) {
    break; /* Comment */
}

loop:
for (;;) {
    break; /* Comment */
    break; /* Comment */
}

`;

exports[`call.php - php-verify: call.php 1`] = `
<?php

foo(/* Comment */ $a /* Comment */, /* Comment */ [] /* Comment */, /* Comment */ ($a + 2) /* Comment */);
foo(/* A */);
$foo->bar(/* B */);

render( // Comment
    'string',
    $container
);

$var->render( // Comment
    'string',
    $var
);

render(
    'string',
    $container
    // Comment
);

$var->render(
    'string',
    $var
    // Comment
);

$var->render(
    // Comment
    'string',
    // Comment
    $var
    // Comment
);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

foo(
    /* Comment */ $a /* Comment */,
    /* Comment */ [] /* Comment */,
    /* Comment */ $a + 2 /* Comment */
);
foo(/* A */);
$foo->bar(/* B */);

render(
    // Comment
    'string',
    $container
);

$var->render(
    // Comment
    'string',
    $var
);

render(
    'string',
    $container
    // Comment
);

$var->render(
    'string',
    $var
    // Comment
);

$var->render(
    // Comment
    'string',
    // Comment
    $var
    // Comment
);

`;

exports[`cast.php - php-verify: cast.php 1`] = `
<?php

$var = /* Comment */ (int) /* Comment */ '1' /* Comment */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var = /* Comment */ (int) /* Comment */ '1' /* Comment */;

`;

exports[`class.php - php-verify: class.php 1`] = `
<?php
namespace Test\\test\\test;

use Some\\other\\test;

/**
 * @property \\Test\\test $test
 */
class Foo extends Bar implements Baz, Buzz {
  public $test;

  function test() {
    return "test";
  }

  public function &passByReferenceTest() {
    $a = 1;
    return $a;
  }
}

return new class( $this->taxonomy, $this->post_types ) extends Taxonomy_Config {
	// body of anonymous class
	public function get_args() {
		// body of member function of anonymous class
		return []; // after return in member function of anonymous class
	} // after member function on anonymous class

};

$test = new class($arg1) extends Test {
  // some comment
};

$test = new class {
  //some comment
};


namespace Tribe\\Project\\Twig;

interface Template_Interface {
	/**
	 * Build the data that will be available to the template
	 *
	 * @return array
	 */
	public function get_data(): array;

	/**
	 * Render the template and return it as a string
	 *
	 * @return string The rendered template
	 */
	public function render(): string;
}


class Foo {/* Comment */}
interface FooI {/* Comment */}
trait FooT {/* Comment */}

// 424 : Method failure
class ResponseMethodFailure 
  // behaves as an error
  extends ResponseNotAcceptable
  implements
    // Some comment
    FooBar,
    // Another comment
    BarBaz
{

}

// 424 : Method failure
class ResponseMethodFailure
    extends // behaves as an error
        ResponseNotAcceptable
    implements
        // Some comment
        FooBar,
        // Another comment
        BarBaz
{

}


// 424 : Method failure
class ResponseMethodFailure
    extends
        // behaves as an error
        ResponseNotAcceptable
    implements
        // Some comment
        FooBar,
        // Another comment
        BarBaz
{

}

// 424 : Method failure
class ResponseMethodFailure extends ResponseNotAcceptable implements
    // Some comment
    FooBar,
    // Another comment
    BarBaz
{

}

class MyClass
{
}

// Comment
class MyClass
{

}

class MyClass
{
    // Comment
}

$var = new class {};

// Comment
$var = new class {};

$var = new class {
    // Comment
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
namespace Test\\test\\test;

use Some\\other\\test;

/**
 * @property \\Test\\test $test
 */
class Foo extends Bar implements Baz, Buzz
{
    public $test;

    function test()
    {
        return "test";
    }

    public function &passByReferenceTest()
    {
        $a = 1;
        return $a;
    }
}

return new class($this->taxonomy, $this->post_types) extends Taxonomy_Config {
    // body of anonymous class
    public function get_args()
    {
        // body of member function of anonymous class
        return []; // after return in member function of anonymous class
    } // after member function on anonymous class
};

$test = new class($arg1) extends Test {
    // some comment
};

$test = new class {
    //some comment
};

namespace Tribe\\Project\\Twig;

interface Template_Interface
{
    /**
     * Build the data that will be available to the template
     *
     * @return array
     */
    public function get_data(): array;

    /**
     * Render the template and return it as a string
     *
     * @return string The rendered template
     */
    public function render(): string;
}

class Foo
{
    /* Comment */
}
interface FooI
{
    /* Comment */
}
trait FooT
{
    /* Comment */
}

// 424 : Method failure
class ResponseMethodFailure
    // behaves as an error
    extends ResponseNotAcceptable
    implements
        // Some comment
        FooBar,
        // Another comment
        BarBaz
{
}

// 424 : Method failure
class ResponseMethodFailure
    // behaves as an error
    extends ResponseNotAcceptable
    implements
        // Some comment
        FooBar,
        // Another comment
        BarBaz
{
}

// 424 : Method failure
class ResponseMethodFailure
    // behaves as an error
    extends ResponseNotAcceptable
    implements
        // Some comment
        FooBar,
        // Another comment
        BarBaz
{
}

// 424 : Method failure
class ResponseMethodFailure extends ResponseNotAcceptable implements
    // Some comment
    FooBar,
    // Another comment
    BarBaz
{
}

class MyClass
{
}

// Comment
class MyClass
{
}

class MyClass
{
    // Comment
}

$var = new class {};

// Comment
$var = new class {};

$var = new class {
    // Comment
};

`;

exports[`classconstant.php - php-verify: classconstant.php 1`] = `
<?php

$var = new class {
    const CONSTANT =
        // Comment 1
        // Comment 2
        'string';
};

$var = new class {
    const CONSTANT = // Comment 1
        // Comment 2
        'string';
};

$var = new class {
    const
        // Comment 1
        CONSTANT
        // Comment 2
        =
        // Comment 3
        'string';
};

$var = new class {
    public
        // Comment 1
        const
        // Comment 2
        CONSTANT
        // Comment 3
        =
        // Comment 4
        'string';
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var = new class {
    const CONSTANT =
        // Comment 1
        // Comment 2
        'string';
};

$var = new class {
    // Comment 1
    const CONSTANT =
        // Comment 2
        'string';
};

$var = new class {
    // Comment 1
    const CONSTANT =
        // Comment 2
        // Comment 3
        'string';
};

$var = new class {
    // Comment 1
    // Comment 2
    public const CONSTANT =
        // Comment 3
        // Comment 4
        'string';
};

`;

exports[`clone.php - php-verify: clone.php 1`] = `
<?php

$obj2 = clone /* Comments */ $obj /* Comments */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$obj2 = clone /* Comments */ $obj /* Comments */;

`;

exports[`closure.php - php-verify: closure.php 1`] = `
<?php

$var = function (/* Comment */) {};
$var = function (/* Comment */ $arg /* Comment */) {};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var = function (/* Comment */) {};
$var = function (/* Comment */ $arg /* Comment */) {};

`;

exports[`comments.php - php-verify: comments.php 1`] = `
<?php
/** @var int $int This is a counter. */
$int = 0;

// there should be no docblock here
$int++;

// multi
// line
// comment
// test
$hi = 1;

/**
 * test fwd slash 12/3 comment
 */

/**
 * test backwards slash 1\\2 comment
 */

/**
 * Multi line
* test with wrong indentation
*/

/**
 * Multi line
 * test with right indentation
 */

/**
 * This class acts as an example on where to position a DocBlock.
 */
class Foo
{
    /** @var string|null $title contains a title for the Foo with a max. length of 24 characters */
    protected $title = null;

    /**
     * Sets a single-line title.
     *
     * @param string $title A text with a maximum of 24 characters.
     *
     * @return void
     */
    public function setTitle($title)
    {
        // there should be no docblock here
        $this->title = $title;
    }
}

/*********************
 * Some long comment *
 *********************/

// This is a one-line c++ style comment

/* This is a multi line comment
   yet another line of comment */

/*
This is a multiple-lines comment block
that spans over multiple
lines
*/

# This is a one-line shell-style comment


for ($i = 0; $i < 10; $i++) {
    // some comment
    $a = 1;
    $b = 2;

    while (true) {
        // Some comment
        $test = 1;
    }
}

while (true) {
  // some comment
}

do {
  // some comment
} while (true);

$test = foo ?: bar(function () {
    $foo = "bar";
    // test
});

$test = foo ? true : bar(function () {
    $foo = "bar";
    // test
});

$constraint = new UniqueEntity(array(
    'message' => 'myMessage'
    // no "em" option set
));

return (
   // parens test
   // some comment
   $test
);

/***
 * Configures the tasks tabs (sub_menu)
 */

class Test {
  /******************************************
   * ORIGINAL SHIPPING DATA
   *****************************************/
   public $test;
}

/*
      some test

  */

  /*
  <a href="#"
      class="btn btn-info ladda-button"
      data-ui-component="unified-modal-opener"
      data-style="zoom-in"
      data-title="Title modal"
      data-size="md"
      data-header="true"
      data-footer="false"
      data-render="contact-form"
      data-view="Title"
      >
      <span class="ladda-label">Modal</span>
  </a>

  Options: data-render - contact-form, render, template-part
  */

/**
 * See http://example.com
 *
 * Some example code
 * \`\`\`php
 * $hello = 'world'; // This is a comment in a comment
 * \`\`\`
 */
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
/** @var int $int This is a counter. */
$int = 0;

// there should be no docblock here
$int++;

// multi
// line
// comment
// test
$hi = 1;

/**
 * test fwd slash 12/3 comment
 */

/**
 * test backwards slash 1\\2 comment
 */

/**
 * Multi line
 * test with wrong indentation
 */

/**
 * Multi line
 * test with right indentation
 */

/**
 * This class acts as an example on where to position a DocBlock.
 */
class Foo
{
    /** @var string|null $title contains a title for the Foo with a max. length of 24 characters */
    protected $title = null;

    /**
     * Sets a single-line title.
     *
     * @param string $title A text with a maximum of 24 characters.
     *
     * @return void
     */
    public function setTitle($title)
    {
        // there should be no docblock here
        $this->title = $title;
    }
}

/*********************
 * Some long comment *
 *********************/

// This is a one-line c++ style comment

/* This is a multi line comment
 yet another line of comment */

/*
This is a multiple-lines comment block
that spans over multiple
lines
*/

# This is a one-line shell-style comment

for ($i = 0; $i < 10; $i++) {
    // some comment
    $a = 1;
    $b = 2;

    while (true) {
        // Some comment
        $test = 1;
    }
}

while (true) {
    // some comment
}

do {
    // some comment
} while (true);

$test =
    foo ?:
    bar(function () {
        $foo = "bar";
        // test
    });

$test = foo
    ? true
    : bar(function () {
        $foo = "bar";
        // test
    });

$constraint = new UniqueEntity(array(
    'message' => 'myMessage'
    // no "em" option set
));

return
    // parens test
    // some comment
    $test;

/***
 * Configures the tasks tabs (sub_menu)
 */

class Test
{
    /******************************************
     * ORIGINAL SHIPPING DATA
     *****************************************/
    public $test;
}

/*
      some test

  */

/*
  <a href="#"
      class="btn btn-info ladda-button"
      data-ui-component="unified-modal-opener"
      data-style="zoom-in"
      data-title="Title modal"
      data-size="md"
      data-header="true"
      data-footer="false"
      data-render="contact-form"
      data-view="Title"
      >
      <span class="ladda-label">Modal</span>
  </a>

  Options: data-render - contact-form, render, template-part
  */

/**
 * See http://example.com
 *
 * Some example code
 * \`\`\`php
 * $hello = 'world'; // This is a comment in a comment
 * \`\`\`
 */

`;

exports[`continue.php - php-verify: continue.php 1`] = `
<?php

for (;;) {
    continue /* comment */;
}

loop: for (;;) {
    continue /* comment */ 1;
    continue 1 /* comment */;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

for (;;) {
    continue; /* comment */
}

loop:
for (;;) {
    continue; /* comment */
    continue; /* comment */
}

`;

exports[`do.php - php-verify: do.php 1`] = `
<?php
// Comment
do { // Comment
    // Comment
    echo $i; // Comment
    // Comment
} while ($i > 0); // Comment

do {
} while (/* Comments */ true /* Comments */);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
do {
    // Comment
    // Comment
    echo $i; // Comment
    // Comment
} while ($i > 0); // Comment

do {
} while (/* Comments */ true /* Comments */);

`;

exports[`echo.php - php-verify: echo.php 1`] = `
<?php

// Comment
echo // Comment
    $foo, // Comment
    $bar // Comment
; // Comment

/* Comment */echo/* Comment */$foo/* Comment */,/* Comment */$bar/* Comment */;/* Comment */~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

// Comment
echo // Comment
$foo, // Comment
    $bar; // Comment // Comment

/* Comment */ echo /* Comment */ $foo /* Comment */,
    /* Comment */ $bar /* Comment */; /* Comment */

`;

exports[`edge_cases.php - php-verify: edge_cases.php 1`] = `
<?php
class Test{
  public function testFunction (/* inline */ $arg) {
    // body
  }

  function testFunction ($arg1, /* inline */ $arg2) {

  }
}

function testFunction (/* inline */ $arg) {
  // body
}

function testFunction ($arg1, /* inline */ $arg2) {

}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
class Test
{
    public function testFunction(/* inline */ $arg)
    {
        // body
    }

    function testFunction($arg1, /* inline */ $arg2)
    {
    }
}

function testFunction(/* inline */ $arg)
{
    // body
}

function testFunction($arg1, /* inline */ $arg2)
{
}

`;

exports[`empty.php - php-verify: empty.php 1`] = `
<?php

if (empty(/* Comment */ [] /* Comment */)) {
    echo "Foo";
}

if (
    empty( // Comment
        $a
    )
) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

if (empty(/* Comment */ [] /* Comment */)) {
    echo "Foo";
}

if (
    empty(
        // Comment
        $a
    )
) {
}

`;

exports[`eval.php - php-verify: eval.php 1`] = `
<?php

eval(
    /* Comment */
    "echo 'test';"
    /* Comment */
);

eval( // Comment
    $a
);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

eval(
    /* Comment */
    "echo 'test';"
    /* Comment */
);

eval(
    // Comment
    $a
);

`;

exports[`exit.php - php-verify: exit.php 1`] = `
<?php

exit(/* Comment */);
exit(/* Comment */1);
exit(1/* Comment */);
exit(/* Comment */1/* Comment */);
exit()/* Comment */;
/* Comment */exit/* Comment */()/* Comment */;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

exit(
    /* Comment */);
exit(/* Comment */ 1);
exit(1 /* Comment */);
exit(/* Comment */ 1 /* Comment */);
exit(
    /* Comment */);
/* Comment */ exit(
    /* Comment */
    /* Comment */);

`;

exports[`for.php - php-verify: for.php 1`] = `
<?php
for // Comment
(;;);

for /* Comment */(;;);

// Comment
for ($i = 1; $i <= 10; $i++) { // Comment
    // Comment
    echo $i; // Comment
    // Comment
} // Comment


for (/* Comments */ $i /* Comments */ = /* Comments */ 1 /* Comments */; /* Comments */ $i /* Comments */ <= /* Comments */ 10 /* Comments */; /* Comments */ $i++ /* Comments */) {
    echo $i;
}

foreach([1,2,3] as $i)
    // this comment will screw things up
    echo $i;

for($i = 1; $i < 10; $i++)
    // this comment will screw things up
    echo $i;

for (;;) { // Comment
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
for (;;);

/* Comment */ for (;;);

// Comment
for ($i = 1; $i <= 10; $i++) {
    // Comment
    // Comment
    echo $i; // Comment
    // Comment
} // Comment

for ($i = 1; $i <= 10; $i++) {
    /* Comments */ /* Comments */ /* Comments */ /* Comments */ /* Comments */ /* Comments */ /* Comments */ /* Comments */ /* Comments */ /* Comments */ echo $i;
}

foreach ([1, 2, 3] as $i) {
    // this comment will screw things up
    echo $i;
}

for ($i = 1; $i < 10; $i++) {
    // this comment will screw things up
    echo $i;
}

for (;;) {
    // Comment
}

`;

exports[`foreach.php - php-verify: foreach.php 1`] = `
<?php
// Comment
foreach ($iterable as $value) { // Comment
    // Comment
    echo 'Foo'; // Comment
    // Comment
} // Comment


foreach (/* Comments */ $iterable /* Comments */ as /* Comments */ $value /* Comments */) {}

foreach (/* Comments */ $iterable /* Comments */ as /* Comments */ $key /* Comments */ => /* Comments */ $value /* Comments */) {}

foreach ($x
/*a*/
as //b
$y) //c
{};

foreach ($x as /*a*/ //b
$y) {}; //c

foreach ($x /*a*/ as $y) {}; //b //c

foreach ($x
//a
as $y) {};

foreach($x as
//a
$y) {};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
foreach ($iterable as $value) {
    // Comment
    // Comment
    echo 'Foo'; // Comment
    // Comment
} // Comment

foreach (
    /* Comments */ $iterable /* Comments */
    as /* Comments */ $value /* Comments */
) {
}

foreach (
    /* Comments */ $iterable /* Comments */
    as /* Comments */ $key /* Comments */ =>
        /* Comments */ $value /* Comments */
) {
}

/*a*/
foreach (
    $x //b
    as $y //c
) {
}

foreach (
    $x /*a*/ //b
    as $y
) {
} //c

foreach ($x /*a*/ as $y) {
} //b //c

//a
foreach ($x as $y) {
}

//a
foreach ($x as $y) {
}

`;

exports[`functions.php - php-verify: functions.php 1`] = `
<?php

function foo(/* 1 */ $a /* 2 */ = /* 3 */ 1 /* 4 */) {}
function foo($a): /* 5 */ ?string /* 6 */ {}
function foo(/* 1 */ $a /* 2 */ = /* 3 */ 1 /* 4 */): /* 5 */ ?string /* 6 */ {}
function emptyFn(/*Comment */) {}
function fn( // Comment
) {}
function fn(
    // Comment
) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function foo(/* 1 */ $a /* 2 */ = /* 3 */ 1 /* 4 */)
{
}
function foo($a): /* 5 */ ?string /* 6 */
{
}
function foo(/* 1 */ $a /* 2 */ = /* 3 */ 1 /* 4 */): /* 5 */ ?string /* 6 */
{
}
function emptyFn(/*Comment */)
{
}
function fn()
{
} // Comment
function fn()
{
}
// Comment

`;

exports[`global.php - php-verify: global.php 1`] = `
<?php

global /* Comment */ $a /* Comment */, /* Comment */ $b /* Comment */;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

global /* Comment */ $a /* Comment */, /* Comment */ $b /* Comment */;

`;

exports[`goto.php - php-verify: goto.php 1`] = `
<?php

/* Comment */goto/* Comment */a/* Comment */;
echo 'Foo';

/* Comment */a/* Comment */:/* Comment */
echo 'Bar';~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

/* Comment */ goto a; /* Comment */ /* Comment */
echo 'Foo';

/* Comment */ /* Comment */ a: /* Comment */
echo 'Bar';

`;

exports[`halt.php - php-verify: halt.php 1`] = `
<?php

/*Comment*/__halt_compiler/*Comment*/(/*Comment*/)/*Comment*/;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

/*Comment*/ /*Comment*/
/*Comment*/
/*Comment*/
__halt_compiler();
`;

exports[`halt-1.php - php-verify: halt-1.php 1`] = `
<?php

// Comment 1
__halt_compiler
// Comment 2
( // Comment 3
// Comment 4
);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

// Comment 1
// Comment 2
// Comment 3
// Comment 4
__halt_compiler();

`;

exports[`heredoc.php - php-verify: heredoc.php 1`] = `
<?php
$str = /* Comment */<<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD;
/* Comment */

echo $str;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$str /* Comment */ = <<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD;
/* Comment */

echo $str;

`;

exports[`if.php - php-verify: if.php 1`] = `
<?php
// Comment 1
if (1) { // Comment 2
    // Comment 3
    echo "Foo"; // Comment 4
    // Comment 5
}
// Comment 6
elseif (2) { // Comment 7
    // Comment 8
    echo "Bar";
    // Comment 9
}
// Comment 10
else { // Comment 11
    // Comment 12
    echo "FooBar";
    // Comment 13
} // Comment 14

if (/* Comments */ true /* Comments */) {
} elseif (/* Comments */ false /* Comments */) {
} else {}


if (2 /* MB_OVERLOAD_STRING */ & (int) ini_get('mbstring.func_overload')) {
  mb_internal_encoding('ASCII');
}

// this is a comment on an if
if (false)
    do_nothing();

// and this is a comment on an elseif
elseif (false)
    also_do_nothing();

if (1)
// comment
{
    false;
}
// comment
else if (2)
    true;
// multi
// ple
// lines
else if (3)
    // existing comment
    true;
// okay?
else if (4) {
    // empty with existing comment
}
// comment
else {
}

if (5) // comment
true;

if (6) // comment
{true;}
else if (7) // comment
true;
else // comment
{true;}

if (8) // comment
// comment
{true;}
else if (9) // comment
// comment
true;
else // comment
// comment
{true;}

if (10) /* comment */ // comment
{true;}
else if (11) /* comment */
true;
else if (12) // comment /* comment */ // comment
true;
else if (13) /* comment */ /* comment */ // comment
true;
else /* comment */
{true;}

if (14) // comment
/* comment */
// comment
{true;}
else if (15) // comment
/* comment */
/* comment */ // comment
true;

if ($cond) {
    stuff();
} /* comment */ else if ($cond) {
    stuff();
}
// comment
else {
    stuff();
}

if ($cond) stuff();
// comment
else stuff();

function f() {
    if ($untrackedChoice === 0) /* Cancel */ {
        return null;
    } else if ($untrackedChoice === 1) /* Add */ {
        yield $repository->addAll($args);
        $shouldAmend = true;
    } else if ($untrackedChoice === 2) /* Allow Untracked */ {
        $allowUntracked = true;
    }
}

function f() {
    if ($untrackedChoice === 0) /* Cancel */
        null;
    else if ($untrackedChoice === 1) /* Add */
        $shouldAmend = true;
    else if ($untrackedChoice === 2) /* Allow Untracked */
        $allowUntracked = true;
}

function f() {
    if ($untrackedChoice === 0) /* Cancel */ // Cancel
        null;
    else if ($untrackedChoice === 1) /* Add */ // Add
        $shouldAmend = true;
    else if ($untrackedChoice === 2) /* Allow Untracked */ // Allow Untracked
        $allowUntracked = true;
}

function f() {
    if ($untrackedChoice === 0)
        /* Cancel */ {
        return null;
    }
    else if ($untrackedChoice === 1)
        /* Add */ {
        yield $repository->addAll($args);
        $shouldAmend = true;
    }
    else if ($untrackedChoice === 2)
        /* Allow Untracked */ {
        $allowUntracked = true;
    }
}

function f() {
    if ($untrackedChoice === 0) {
        /* Cancel */ return null;
    } else if ($untrackedChoice === 1) {
        /* Add */ yield $repository->addAll($args);
        $shouldAmend = true;
    } else if ($untrackedChoice === 2) {
        /* Allow Untracked */ $allowUntracked = true;
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment 1
if (1) {
    // Comment 2
    // Comment 3
    echo "Foo"; // Comment 4
    // Comment 5
} elseif (2) {
    // Comment 6
    // Comment 7
    // Comment 8
    echo "Bar";
    // Comment 9
} else {
    // Comment 10
    // Comment 11
    // Comment 12
    echo "FooBar";
    // Comment 13
} // Comment 14

if (/* Comments */ true /* Comments */) {
} elseif (/* Comments */ false /* Comments */) {
} else {
}

if (2 /* MB_OVERLOAD_STRING */ & (int) ini_get('mbstring.func_overload')) {
    mb_internal_encoding('ASCII');
}

// this is a comment on an if
if (false) {
    do_nothing();
} elseif (false) {
    // and this is a comment on an elseif
    also_do_nothing();
}

if (1) {
    // comment
    false;
} elseif (2) {
    // comment
    true;
} elseif (3) {
    // multi
    // ple
    // lines
    // existing comment
    true;
} elseif (4) {
    // okay?
    // empty with existing comment
} else {
    // comment

}

if (
    5 // comment
) {
    true;
}

if (
    6 // comment
) {
    true;
} elseif (
    7 // comment
) {
    true; // comment
} else {
    true;
}

if (
    8 // comment
) {
    // comment
    true;
} elseif (
    9 // comment
) {
    // comment
    true; // comment
} else {
    // comment
    true;
}

if (
    10 /* comment */ // comment
) {
    true;
} elseif (11 /* comment */) {
    true;
} elseif (
    12 // comment /* comment */ // comment
) {
    true;
} elseif (
    13 /* comment */ /* comment */ // comment
) {
    true; /* comment */
} else {
    true;
}

if (
    14 // comment
) {
    /* comment */
    // comment
    true;
} elseif (
    15 // comment // comment
) {
    /* comment */
    /* comment */ true;
}

if ($cond) {
    stuff();
} elseif ($cond) {
    /* comment */ stuff();
} else {
    // comment
    stuff();
}

if ($cond) {
    stuff();
} else {
    // comment
    stuff();
}

function f()
{
    if ($untrackedChoice === 0) {
        /* Cancel */ return null;
    } elseif ($untrackedChoice === 1) {
        /* Add */ yield $repository->addAll($args);
        $shouldAmend = true;
    } elseif ($untrackedChoice === 2) {
        /* Allow Untracked */ $allowUntracked = true;
    }
}

function f()
{
    if ($untrackedChoice === 0 /* Cancel */) {
        null;
    } elseif ($untrackedChoice === 1 /* Add */) {
        $shouldAmend = true;
    } elseif ($untrackedChoice === 2 /* Allow Untracked */) {
        $allowUntracked = true;
    }
}

function f()
{
    if (
        $untrackedChoice === 0 /* Cancel */ // Cancel
    ) {
        null;
    } elseif (
        $untrackedChoice === 1 /* Add */ // Add
    ) {
        $shouldAmend = true;
    } elseif (
        $untrackedChoice === 2 /* Allow Untracked */ // Allow Untracked
    ) {
        $allowUntracked = true;
    }
}

function f()
{
    if ($untrackedChoice === 0) {
        /* Cancel */ return null;
    } elseif ($untrackedChoice === 1) {
        /* Add */ yield $repository->addAll($args);
        $shouldAmend = true;
    } elseif ($untrackedChoice === 2) {
        /* Allow Untracked */ $allowUntracked = true;
    }
}

function f()
{
    if ($untrackedChoice === 0) {
        /* Cancel */ return null;
    } elseif ($untrackedChoice === 1) {
        /* Add */ yield $repository->addAll($args);
        $shouldAmend = true;
    } elseif ($untrackedChoice === 2) {
        /* Allow Untracked */ $allowUntracked = true;
    }
}

`;

exports[`include.php - php-verify: include.php 1`] = `
<?php
// Comment
include // Comment
    // Comment
    "test.php" // Comment
    // Comment
; // Comment

// Comment
include (// Comment
    // Comment
"test.php" // Comment
    // Comment
); // Comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
include // Comment
// Comment
"test.php"; // Comment
// Comment // Comment

// Comment
include // Comment
// Comment
"test.php"; // Comment
// Comment // Comment

`;

exports[`inline.php - php-verify: inline.php 1`] = `
some text
/**
* A comment
*/
<?php
$thing = 1;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
some text
/**
* A comment
*/
<?php $thing = 1;

`;

exports[`inline2.php - php-verify: inline2.php 1`] = `
<?php
// test
?>
<h1>Test</h1>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// test
?>
<h1>Test</h1>

`;

exports[`inline3.php - php-verify: inline3.php 1`] = `
<h1>Test</h1>
<?php
// test
?>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<h1>Test</h1>
<?php
// test
?>
`;

exports[`inline4.php - php-verify: inline4.php 1`] = `
<?php
/**
 * A
 */

// B

/**
 * C
 */
?>
<h1>Test</h1>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
/**
 * A
 */

// B

/**
 * C
 */
?>
<h1>Test</h1>

`;

exports[`inline5.php - php-verify: inline5.php 1`] = `
<h1>Test</h1>
<?php
// test
?>
<h1>Test</h1>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<h1>Test</h1>
<?php
// test
?>
<h1>Test</h1>

`;

exports[`inline6.php - php-verify: inline6.php 1`] = `
<h1>Test</h1>
<?php

/**
 * test
 */

?>
<h1>Test</h1>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<h1>Test</h1>
<?php
/**
 * test
 */
?>
<h1>Test</h1>

`;

exports[`inline7.php - php-verify: inline7.php 1`] = `
<?php echo 1; // comment ?>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php echo 1; // comment ?>

`;

exports[`interface.php - php-verify: interface.php 1`] = `
<?php

interface IFoo { /* Comments */ }
interface IFoo {
    // Comments
}

// Comment
interface IFoo extends
    // Comment
    MyClass {}

// Comment
interface IFoo extends
    // Comment
    MyClass,
    // Comment
    MyOtherClass,
    // Comment
    OtherClass {}

interface MyInterface
{
}

// Comment
interface MyInterface
{

}

interface MyInterface
{
    // Comment
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

interface IFoo
{
    /* Comments */
}
interface IFoo
{
    // Comments
}

// Comment
interface IFoo extends
    // Comment
    MyClass
{
}

// Comment
interface IFoo extends
    // Comment
    MyClass,
    // Comment
    MyOtherClass,
    // Comment
    OtherClass
{
}

interface MyInterface
{
}

// Comment
interface MyInterface
{
}

interface MyInterface
{
    // Comment
}

`;

exports[`isset.php - php-verify: isset.php 1`] = `
<?php

if (isset(/* Comment */ $a[1]/* Comment */)) {
    echo "Foo";
}

if (
    isset( // Comment
        $a
    )
) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

if (isset(/* Comment */ $a[1] /* Comment */)) {
    echo "Foo";
}

if (
    isset(
        // Comment
        $a
    )
) {
}

`;

exports[`list.php - php-verify: list.php 1`] = `
<?php

list(/* Comment */ $drink /* Comment */ , /* Comment */ $color /* Comment */, /* Comment */ $power /* Comment */) = $info;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

list(
    /* Comment */ $drink /* Comment */,
    /* Comment */ $color /* Comment */,
    /* Comment */ $power /* Comment */
) = $info;

`;

exports[`method.php - php-verify: method.php 1`] = `
<?php

class Foo {
    public function foo(/* 1 */ $a /* 2 */ = /* 3 */ 1 /* 4 */): /* 5 */ ?string /* 6 */ {}

    public function emptyMethod(/* comments */) {}

    abstract public function sortByName(/* bool $useNaturalSort = false */);

    /* comment */ protected /* comment */ static /* comment */ $foo /* comment */;

    public function foo( // Comment
    ) {}

    public function foo(
        // Comment
    ) {}

    abstract public function foo( // Comment
    );

    abstract public function foo(
        // Comment
    );
}


class add_vendor extends request{
    protected function request(){
        $qb_vendor->setVendorAddress(
            $vendor->address_1, // address 1
            $vendor->address_2, // address 2
            '', // address 3 mike testing
            '', // address 4
            '', // address 5
            $vendor->city, // city
            $vendor->state, // state
            $vendor->zip // state
        );
    }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

class Foo
{
    public function foo(
        /* 1 */ $a /* 2 */ = /* 3 */ 1 /* 4 */
    ): /* 5 */ ?string /* 6 */ {
    }

    public function emptyMethod(/* comments */)
    {
    }

    abstract public function sortByName(/* bool $useNaturalSort = false */); /* comment */

    /* comment */ /* comment */ protected static $foo; /* comment */

    public function foo()
    {
    } // Comment

    public function foo()
    {
    }
    // Comment

    abstract public function foo(); // Comment

    abstract public function foo();
    // Comment
}

class add_vendor extends request
{
    protected function request()
    {
        $qb_vendor->setVendorAddress(
            $vendor->address_1, // address 1
            $vendor->address_2, // address 2
            '', // address 3 mike testing
            '', // address 4
            '', // address 5
            $vendor->city, // city
            $vendor->state, // state
            $vendor->zip // state
        );
    }
}

`;

exports[`new.php - php-verify: new.php 1`] = `
<?php
$a = new Foo(/*Comment*/);
$a = new Foo(/* Comment */ 1 /*Comments*/);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$a = new Foo(/*Comment*/);
$a = new Foo(/* Comment */ 1 /*Comments*/);

`;

exports[`no_code.php - php-verify: no_code.php 1`] = `
<?php
/**
 * Product Loop Start
 *
 * @author  WooThemes
 * @package WooCommerce/Templates
 * @version 2.0.0
 */
?>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

/**
 * Product Loop Start
 *
 * @author  WooThemes
 * @package WooCommerce/Templates
 * @version 2.0.0
 */

?>

`;

exports[`nowdoc.php - php-verify: nowdoc.php 1`] = `
<?php
$str = /* Comment */<<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD;
/* Comment */

echo $str;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$str = /* Comment */ <<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD;
/* Comment */

echo $str;

`;

exports[`offsetlookup.php - php-verify: offsetlookup.php 1`] = `
<?php

echo /*Comment*/$a/*Comment*/[/*Comment*/1/*Comment*/]/*Comment*/;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

echo /*Comment*/ /*Comment*/ $a[/*Comment*/ 1 /*Comment*/] /*Comment*/;

`;

exports[`parameter.php - php-verify: parameter.php 1`] = `
<?php

function foo(/* Comment */ $a, /* Comment */ array /* Comment */ $b /* Comment */ = /* Comment */ [] /* Comment */) {};

function bar(/* Comment */ &$a /* Comment */) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function foo(
    /* Comment */ $a,
    /* Comment */ array /* Comment */ $b /* Comment */ = /* Comment */ [] /* Comment */
) {
}

function bar(/* Comment */ &$a /* Comment */)
{
}

`;

exports[`post.php - php-verify: post.php 1`] = `
<?php

$a/* Comment */++;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$a /* Comment */++;

`;

exports[`pre.php - php-verify: pre.php 1`] = `
<?php

++/*Comment */$a;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

++/*Comment */ $a;

`;

exports[`print.php - php-verify: print.php 1`] = `
<?php

print // Comment
    $foo
    /* Comment */
    ;

print /* Comment */ $foo /* Comment */;

print // Comment
    $a;

print (// Comment
    $a
);

print call(
    // Comment
    $a
);

print // Comment
    // Comment
    $a;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

print // Comment
    $foo;
    /* Comment */

print /* Comment */ $foo /* Comment */;

print // Comment
    $a;

print // Comment
    $a;

print call(
    // Comment
    $a
);

print // Comment
    // Comment
    $a;

`;

exports[`property.php - php-verify: property.php 1`] = `
<?php

$var = new class {
    public $name =
        // Comment 1
        // Comment 2
        'string';
};

$var = new class {
    public $name = // Comment 1
        // Comment 2
        'string';
};

$var = new class {
    public
        // Comment 1
        $name
        // Comment 2
        =
        // Comment 3
        'string';
};

$var = new class {
    public
        // Comment 1
        static
        // Comment 2
        $name
        // Comment 3
        =
        // Comment 4
        'string';
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var = new class {
    public $name =
        // Comment 1
        // Comment 2
        'string';
};

$var = new class {
    // Comment 1
    public $name =
        // Comment 2
        'string';
};

$var = new class {
    // Comment 1
    public $name =
        // Comment 2
        // Comment 3
        'string';
};

$var = new class {
    // Comment 1
    // Comment 2
    public static $name =
        // Comment 3
        // Comment 4
        'string';
};

`;

exports[`propertylookup.php - php-verify: propertylookup.php 1`] = `
<?php

echo $a/*Comment*/->/*Comment*/bar();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

echo /*Comment*/ /*Comment*/ $a->bar();

`;

exports[`retif.php - php-verify: retif.php 1`] = `
<?php

$inspect = $condition
    ? // node <= 0.8.x
    function($v, $colors) {
        return $util->inspect($v, 0, 0, $colors);
    }
    : // node > 0.8.x
    function($v, $colors) {
        return $util->inspect($v, [ 'colors' => colors ]);
    };

$extractTextPluginOptions = $shouldUseRelativeAssetPaths
    // Making sure that the publicPath goes back to to build folder.
    ? [ 'publicPath' => (new Foo($cssFilename->split('/')->length))->join('../') ] :
    [];

$extractTextPluginOptions = $shouldUseRelativeAssetPaths
    ? // Making sure that the publicPath goes back to to build folder.
    [ 'publicPath' => (new Foo($cssFilename->split("/")->length))->join("../") ]
    : [];

$extractTextPluginOptions = $shouldUseRelativeAssetPaths // Making sure that the publicPath goes back to to build folder.
    ? [ 'publicPath' => (new Foo($cssFilename->split("/")->length))->join("../") ]
    : [];

$var = $process->env->NODE_ENV === "production"
    ? call("./configureProdStore") // a
    : call("./configureDevStore"); // b
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$inspect = $condition
    ? // node <= 0.8.x
    function ($v, $colors) {
        return $util->inspect($v, 0, 0, $colors);
    }
    : // node > 0.8.x
    function ($v, $colors) {
        return $util->inspect($v, ['colors' => colors]);
    };

$extractTextPluginOptions = $shouldUseRelativeAssetPaths
    ? // Making sure that the publicPath goes back to to build folder.
    ['publicPath' => (new Foo($cssFilename->split('/')->length))->join('../')]
    : [];

$extractTextPluginOptions = $shouldUseRelativeAssetPaths
    ? // Making sure that the publicPath goes back to to build folder.
    ['publicPath' => (new Foo($cssFilename->split("/")->length))->join("../")]
    : [];

$extractTextPluginOptions = $shouldUseRelativeAssetPaths // Making sure that the publicPath goes back to to build folder.
    ? ['publicPath' => (new Foo($cssFilename->split("/")->length))->join("../")]
    : [];

$var =
    $process->env->NODE_ENV === "production"
        ? call("./configureProdStore") // a
        : call("./configureDevStore"); // b

`;

exports[`return.php - php-verify: return.php 1`] = `
<?php

function f() {
    return /* a */;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function f()
{
    return /* a */;
}

`;

exports[`silent.php - php-verify: silent.php 1`] = `
<?php

@/*comment*/test();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

@/*comment*/ test();

`;

exports[`static.php - php-verify: static.php 1`] = `
<?php
static /* Comment */ $a /* Comment */, /* Comment */ $b /* Comment */;

static // Comment
$a;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
static /* Comment */ $a /* Comment */, /* Comment */ $b /* Comment */;

static // Comment
    $a;

`;

exports[`staticlookup.php - php-verify: staticlookup.php 1`] = `
<?php

echo Foo/*Comment*/::/*Comment*/bar();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

echo /*Comment*/ /*Comment*/ Foo::bar();

`;

exports[`switch.php - php-verify: switch.php 1`] = `
<?php
// Comment
switch ($i) { // Comment
    // Comment
    case 0: // Comment
        // Comment
        echo "i equals 0"; // Comment
        // Comment
        break; // Comment
        // Comment
    case 1: // Comment
        // Comment
        echo "i equals 1"; // Comment
        break; // Comment
        // Comment
} // Comment

switch (/* Comment */ 1 /* Comment */) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment
switch ($i) {
    // Comment
    // Comment
    case 0: // Comment
        // Comment
        echo "i equals 0"; // Comment
        // Comment
        break; // Comment
    // Comment
    case 1: // Comment
        // Comment
        echo "i equals 1"; // Comment
        break; // Comment
    // Comment
} // Comment

switch (/* Comment */ 1 /* Comment */) {
}

`;

exports[`throw.php - php-verify: throw.php 1`] = `
<?php

// Comment
throw new ClassName( // Comment
    1, // Comment
    // Comment
    2 // Comment
); // Comment

/* Comment */
throw new ClassName( /* Comment */
    /* Comment */ 1, /* Comment */
    /* Comment */
    /* Comment */ 2 /* Comment */
    /* Comment */); /* Comment */
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

// Comment
throw new ClassName( // Comment
    1, // Comment
    // Comment
    2 // Comment
); // Comment

/* Comment */
throw new ClassName /* Comment */(
    /* Comment */ 1 /* Comment */,
    /* Comment */
    /* Comment */ 2 /* Comment */
    /* Comment */
); /* Comment */

`;

exports[`trait.php - php-verify: trait.php 1`] = `
<?php

trait tFoo { /* Comment */ }

trait tFoo {
    // Comment
}

// Comment
trait tFoo extends /* Comment */ ReflectionMethod {}

// Comment
trait tFoo extends
    // Comment
    ReflectionMethod {}

class ImplementingClass {
    /* Comment */
    /* Comment */ use /* Comment */ testTrait /* Comment */, /* Comment */ otherTrait /* Comment */;
    /* Comment */ use /* Comment */ testTrait /* Comment */, /* Comment */ implementingTrait /* Comment */ { /* Comment */
        /* Comment */ A/* Comment */::/* Comment */ testFunction /* Comment */ insteadof /* Comment */ C /* Comment */ ; /* Comment */
        /* Comment */ B/* Comment */::/* Comment */ someOtherTestFunction /* Comment */ as /* Comment */ aliasedFunctionName /* Comment */; /* Comment */
        /* Comment */ C/* Comment */::/* Comment */ testFunction /* Comment */ as  /* Comment */ private /* Comment */ testVisibility /* Comment */;
    }
}

trait MyTrait
{
}

// Comment
trait MyTrait
{

}

trait MyTrait
{
    // Comment
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

trait tFoo
{
    /* Comment */
}

trait tFoo
{
    // Comment
}

// Comment
trait tFoo
    /* Comment */
    extends ReflectionMethod
{
}

// Comment
trait tFoo
    // Comment
    extends ReflectionMethod
{
}

class ImplementingClass
{
    /* Comment */
    /* Comment */ /* Comment */ use testTrait /* Comment */,
        /* Comment */ otherTrait /* Comment */;
    /* Comment */ /* Comment */ use testTrait /* Comment */,
        /* Comment */ implementingTrait /* Comment */ /* Comment */ {
        /* Comment */ A /* Comment */ /* Comment */ /* Comment */ /* Comment */::testFunction insteadof C; /* Comment */ /* Comment */
        /* Comment */ B /* Comment */ /* Comment */ /* Comment */ /* Comment */::someOtherTestFunction as aliasedFunctionName; /* Comment */ /* Comment */
        /* Comment */ C /* Comment */ /* Comment */ /* Comment */ /* Comment */ /* Comment */::testFunction as private testVisibility; /* Comment */
    }
}

trait MyTrait
{
}

// Comment
trait MyTrait
{
}

trait MyTrait
{
    // Comment
}

`;

exports[`try.php - php-verify: try.php 1`] = `
<?php

// comment 1
try {
    // comment 2
}
// comment 3
catch(Expection $e) {
    // comment 4
}
// comment 5
finally // comment 6
{
    // comment 7
}

// comment 1
try {
    // comment 2
}
// comment 3
finally // comment 4
{
    // comment 5
}

// comment 1
try {
    // comment 2
}
// comment 3
catch(OtherException $e) {
    // comment 4
}
// comment 5
catch(Expection $e) {
    // comment 6
}
// comment 7
finally // comment 8
{
    // comment 9
}
// comment 10
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

// comment 1
try {
    // comment 2
} catch (Expection $e) {
    // comment 3
    // comment 4
} finally {
    // comment 5
    // comment 6
    // comment 7
}

// comment 1
try {
    // comment 2
} finally {
    // comment 3
    // comment 4
    // comment 5
}

// comment 1
try {
    // comment 2
} catch (OtherException $e) {
    // comment 3
    // comment 4
} catch (Expection $e) {
    // comment 5
    // comment 6
} finally {
    // comment 7
    // comment 8
    // comment 9
}
// comment 10

`;

exports[`unary.php - php-verify: unary.php 1`] = `
<?php

+/* Comment */$a;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

+/* Comment */ $a;

`;

exports[`unset.php - php-verify: unset.php 1`] = `
<?php

unset(/* Comment */ $foo /* Comment */);

unset( // Comment
    $var
);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

unset(/* Comment */ $foo /* Comment */);

unset(
    // Comment
    $var
);

`;

exports[`usegroup.php - php-verify: usegroup.php 1`] = `
<?php

use /* Comment */ some\\namespaces\\/* Comment */{
    /* Comment */ClassA/* Comment */,
    /* Comment */ ClassB/* Comment */,
    /* Comment */ ClassC /* Comment */ as /* Comment */ C
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

use some\\namespaces\\{
    /* Comment */ /* Comment */ /* Comment */ ClassA /* Comment */,
    /* Comment */ ClassB /* Comment */,
    /* Comment */ ClassC /* Comment */
    /* Comment */ as C
};

`;

exports[`variable.php - php-verify: variable.php 1`] = `
<?php

$obj = // Comment
[
'key' => 'val'
];

$obj // Comment
= [
'key' => 'val'
];

$obj = [ // Comment
'key' => 'val'
];

$obj = [
// Comment
'key' => 'val'
];

$obj = // Comment
[
'val'
];

$obj // Comment
= [
'val'
];

$obj = [ // Comment
'val'
];

$obj = [
// Comment
'val'
];

$obj = // Comment
'val';

$obj = // Comment
'
val
val
';

$obj = // Comment
        '
    val
    val
    ';

$obj = // Comment
    "val";

$obj = // Comment
"
val
val
";

$obj = // Comment
        "
    val
    val
    ";

$obj = // Comment
    "val \${$var}";

$obj = // Comment
"
val 
\${$var}
";

$obj = // Comment
    "
    val 
    \${$var}
    ";
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$obj =
    // Comment
    [
        'key' => 'val'
    ];

$obj =
    // Comment
    [
        'key' => 'val'
    ];

$obj = [
    // Comment
    'key' => 'val'
];

$obj = [
    // Comment
    'key' => 'val'
];

$obj =
    // Comment
    ['val'];

$obj =
    // Comment
    ['val'];

$obj = [
    // Comment
    'val'
];

$obj = [
    // Comment
    'val'
];

$obj =
    // Comment
    'val';

$obj =
    // Comment
    '
val
val
';

$obj =
    // Comment
    '
    val
    val
    ';

$obj =
    // Comment
    "val";

$obj =
    // Comment
    "
val
val
";

$obj =
    // Comment
    "
    val
    val
    ";

$obj =
    // Comment
    "val \${$var}";

$obj =
    // Comment
    "
val 
\${$var}
";

$obj =
    // Comment
    "
    val 
    \${$var}
    ";

`;

exports[`variadic.php - php-verify: variadic.php 1`] = `
<?php

foo(.../*Comment*/$foo);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

foo(.../*Comment*/ $foo);

`;

exports[`while.php - php-verify: while.php 1`] = `
<?php
// Comment 1
while (true) { // Comment 2
    // Comment 3
    echo 'Foo'; // Comment 4
    // Comment 5
} // Comment

while (/* Comments */ true /* Comments */) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
// Comment 1
while (true) {
    // Comment 2
    // Comment 3
    echo 'Foo'; // Comment 4
    // Comment 5
} // Comment

while (/* Comments */ true /* Comments */) {
}

`;

exports[`yield.php - php-verify: yield.php 1`] = `
<?php

function gen_one_to_three() {
    yield /* Comment */ $i  /* Comment */;
    yield  /* Comment */ $id  /* Comment */ =>  /* Comment */ $fields  /* Comment */;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function gen_one_to_three()
{
    yield /* Comment */ $i /* Comment */;
    yield /* Comment */ $id /* Comment */ => /* Comment */ $fields /* Comment */;
}

`;

exports[`yieldfrom.php - php-verify: yieldfrom.php 1`] = `
<?php

function gen() {
    yield 0;
    yield from /* Comment */ from();
    yield 4;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function gen()
{
    yield 0;
    yield from /* Comment */ from();
    yield 4;
}

`;
