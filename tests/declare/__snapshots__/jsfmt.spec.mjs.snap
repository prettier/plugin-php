// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`declare.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php
declare(ticks=1):
$test = 1;
enddeclare;
declare(ticks=1);
$test = 1;
declare(ticks=1) {
  $test = 1;
}
declare(encoding='ISO-8859-1');
$test = 1;
declare( ticks=1 ):
    $test = 1;
enddeclare;

declare(ticks=1);
$test = 1;

if ($var) {
    declare(ticks=1);
}

declare(ticks=1) {
}

declare(ticks=1):
enddeclare;

=====================================output=====================================
<?php
declare(ticks=1):
    $test = 1;
enddeclare;
declare(ticks=1);
$test = 1;
declare(ticks=1) {
    $test = 1;
}
declare(encoding="ISO-8859-1");
$test = 1;
declare(ticks=1):
    $test = 1;
enddeclare;

declare(ticks=1);
$test = 1;

if ($var) {
    declare(ticks=1);
}

declare(ticks=1) {
}

declare(ticks=1):
enddeclare;

================================================================================
`;

exports[`declare-invalid.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(unknown=1);

=====================================output=====================================
<?php

declare(unknown=1);

================================================================================
`;

exports[`declare-multiple-statements.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(ticks=1) {
    $a = 1;
    $b = 2;
}

declare(ticks=2) {
    function test() {
        $a = 1;
    }
}

=====================================output=====================================
<?php

declare(ticks=1) {
    $a = 1;
    $b = 2;
}

declare(ticks=2) {
    function test()
    {
        $a = 1;
    }
}

================================================================================
`;

exports[`declare-multiple-statements-2.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(strict_types=1);

$a = 1;
$b = 2;

function test() {
    $a = 1;
}


=====================================output=====================================
<?php

declare(strict_types=1);

$a = 1;
$b = 2;

function test()
{
    $a = 1;
}

================================================================================
`;

exports[`declare-newline-after.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php
declare(ticks=1);

$a = 1;

=====================================output=====================================
<?php
declare(ticks=1);

$a = 1;

================================================================================
`;

exports[`declare-newline-after-and-before.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(ticks=1);

$a = 1;

=====================================output=====================================
<?php

declare(ticks=1);

$a = 1;

================================================================================
`;

exports[`declare-newline-after-with-namespace.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(ticks=1);

namespace Foo;

=====================================output=====================================
<?php

declare(ticks=1);

namespace Foo;

================================================================================
`;

exports[`declare-newline-before.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(ticks=1);

=====================================output=====================================
<?php

declare(ticks=1);

================================================================================
`;

exports[`declare-no-newline-after-with-namespace.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(ticks=1);
namespace Foo;

=====================================output=====================================
<?php

declare(ticks=1);
namespace Foo;

================================================================================
`;

exports[`declare-no-newline-before-and-after-with-namespace.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php
declare(ticks=1);
namespace Foo;

=====================================output=====================================
<?php
declare(ticks=1);
namespace Foo;

================================================================================
`;

exports[`declare-no-newlines.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php declare(strict_types=1);
$header = <<<'EOF'
This file is part of sebastian/diff.
(c) Sebastian Bergmann <sebastian@phpunit.de>
For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
EOF;

=====================================output=====================================
<?php declare(strict_types=1);
$header = <<<'EOF'
This file is part of sebastian/diff.
(c) Sebastian Bergmann <sebastian@phpunit.de>
For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
EOF;

================================================================================
`;

exports[`declare-on-next-line-after-open-php-tag.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php
declare(ticks=1);

=====================================output=====================================
<?php
declare(ticks=1);

================================================================================
`;

exports[`declare-on-same-line-with-open-php-tag.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php declare(ticks=1);

=====================================output=====================================
<?php declare(ticks=1);

================================================================================
`;

exports[`declare-on-same-line-with-open-php-tag-with-namespace.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php declare(ticks=1);
namespace Foo;

=====================================output=====================================
<?php declare(ticks=1);
namespace Foo;

================================================================================
`;

exports[`declare-with-multiple-space.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php


declare(ticks=1);


namespace Foo;

=====================================output=====================================
<?php

declare(ticks=1);

namespace Foo;

================================================================================
`;

exports[`declare-with-multiple-space-1.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php


declare(ticks=1);


namespace Foo;


$a = 1;

=====================================output=====================================
<?php

declare(ticks=1);

namespace Foo;

$a = 1;

================================================================================
`;

exports[`declare-with-multiple-space-2.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php


declare(ticks=1);


namespace Foo;


use Bar;


$a = 1;

=====================================output=====================================
<?php

declare(ticks=1);

namespace Foo;

use Bar;

$a = 1;

================================================================================
`;

exports[`multiple.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare (strict_types=1);
declare (ticks=1) {
    foo();
}
declare (ticks=2) {
}

=====================================output=====================================
<?php

declare(strict_types=1);
declare(ticks=1) {
    foo();
}
declare(ticks=2) {
}

================================================================================
`;

exports[`multiple-directives.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

declare(encoding='ISO-8859-1', strict_types=1);

declare (X='Y');

declare (A='B', C='D');

declare (A='B', C='D') {}

declare (A='B', C='D'):
enddeclare;

=====================================output=====================================
<?php

declare(encoding="ISO-8859-1", strict_types=1);

declare(X="Y");

declare(A="B", C="D");

declare(A="B", C="D") {
}

declare(A="B", C="D"):
enddeclare;

================================================================================
`;
