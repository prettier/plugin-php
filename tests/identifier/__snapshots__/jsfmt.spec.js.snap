// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`identifier.php - php-verify: identifier.php 1`] = `
<?php

function int(int $var) {}
function intI(iNt $var) {}
function intII(int $var): int {}
function intIII(int $var): iNt {}
function intIIII(int $var): INT {}
function float(float $var) {}
function floatI(fLoAt $var) {}
function bool(bool $var) {}
function boolI(bOoL $var) {}
function string(string $var) {}
function stringI(sTrInG $var) {}
function iterable(iterable $var) {}
function iterableI(iTeRaBlE $var) {}
function object(object $var) {}
function objectI(oBjEcT $var) {}
function arrayI(array $var) {}
function arrayII(aRrAy $var) {}
function arrayIII(ARRAY $var) {}
function arrayIIII($var) : array {}
function arrayIIIII($var) : aRrAy {}
function arrayIIIIII($var) : ARRAY {}
function callableI(callable $var) {}
function callableII(cAlLaBlE $var) {}
function void(): void {}
function voidI(): vOiD {}
function null($var = null) {}
function nullI($var = nUlL) {}
function something(something $var) {}
function somethingI(sOmEtHiNg $var) {}
function somethingII(SOMETHING $var) {}

class A {
    public static function test() {
        self::who();
        sElF::who();
        parent::who();
        pArEnt::who();
        static::who();
        sTaTic::who();
    }

    public function foo(self $arg) {}
    public function foo2(sElF $arg) {}
    public function foo3(parent $arg) {}
    public function foo4(pArEnT $arg) {}
}

// Should don't change

$var = $array[int];
$var = $array[iNt];

$var = $array->{int};
$var = $array->{iNt};

self();
sElF();
parent();
pArEnT();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function int(int $var)
{
}
function intI(int $var)
{
}
function intII(int $var): int
{
}
function intIII(int $var): int
{
}
function intIIII(int $var): int
{
}
function float(float $var)
{
}
function floatI(float $var)
{
}
function bool(bool $var)
{
}
function boolI(bool $var)
{
}
function string(string $var)
{
}
function stringI(string $var)
{
}
function iterable(iterable $var)
{
}
function iterableI(iterable $var)
{
}
function object(object $var)
{
}
function objectI(object $var)
{
}
function arrayI(array $var)
{
}
function arrayII(array $var)
{
}
function arrayIII(array $var)
{
}
function arrayIIII($var): array
{
}
function arrayIIIII($var): array
{
}
function arrayIIIIII($var): array
{
}
function callableI(callable $var)
{
}
function callableII(callable $var)
{
}
function void(): void
{
}
function voidI(): void
{
}
function null($var = null)
{
}
function nullI($var = null)
{
}
function something(something $var)
{
}
function somethingI(sOmEtHiNg $var)
{
}
function somethingII(SOMETHING $var)
{
}

class A
{
    public static function test()
    {
        self::who();
        self::who();
        parent::who();
        parent::who();
        static::who();
        static::who();
    }

    public function foo(self $arg)
    {
    }
    public function foo2(self $arg)
    {
    }
    public function foo3(parent $arg)
    {
    }
    public function foo4(parent $arg)
    {
    }
}

// Should don't change

$var = $array[int];
$var = $array[iNt];

$var = $array->{int};
$var = $array->{iNt};

self();
sElF();
parent();
pArEnT();

`;
