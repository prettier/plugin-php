// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`break-last-call.php - php-verify: break-last-call.php 1`] = `
<?php
function call($store) {
    return callApi($endpoint, $schema)->then(
        function ($response) {
            return next(actionWith([
                'response' => $response,
                'type' => $successType
            ]));
        },
        function ($error) {
            return next(actionWith([
                'type' => $failureType,
                'error' => $error->message || 'Something bad happened'
            ]));
        }
  );
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
function call($store)
{
    return callApi($endpoint, $schema)->then(
        function ($response) {
            return next(
                actionWith([
                    'response' => $response,
                    'type' => $successType
                ])
            );
        },
        function ($error) {
            return next(
                actionWith([
                    'type' => $failureType,
                    'error' => $error->message || 'Something bad happened'
                ])
            );
        }
    );
}

`;

exports[`break-last-member.php - php-verify: break-last-member.php 1`] = `
<?php

$SomeVeryLongUpperCaseConstant->someVeryLongCallExpression()->some_very_long_member_expression;
$weNeedToReachTheEightyCharacterLimitXXXXXXXXXXXXXXXXX->someNode
->childrenInAnArray[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;
$superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong->{$exampleOfOrderOfGetterAndSetterReordered};
$superSupersuperSupersuperSupersuperSupersuperSuperLong::$exampleOfOrderOfGetterAndSetterReordered;
$superSupersuperSupersuperSupersuperSupersuperSuperLong::$exampleOfOrderOfGetterAndSetterReordered[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong = (new SuperSuperSuperSuperSuperSuperLongClassName())->some_very_long_member_expression;
new $superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong();
(new $superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong)->superSupersuperSupersuperSupersuperSupersuperSuperLong;
$test = $superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;
$test = $test = $superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$SomeVeryLongUpperCaseConstant->someVeryLongCallExpression()
    ->some_very_long_member_expression;
$weNeedToReachTheEightyCharacterLimitXXXXXXXXXXXXXXXXX->someNode
    ->childrenInAnArray[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;
$superSupersuperSupersuperSupersuperSupersuperSuperLong
    ->exampleOfOrderOfGetterAndSetterReordered[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong->$exampleOfOrderOfGetterAndSetterReordered;
$superSupersuperSupersuperSupersuperSupersuperSuperLong::$exampleOfOrderOfGetterAndSetterReordered;
$superSupersuperSupersuperSupersuperSupersuperSuperLong
    ::$exampleOfOrderOfGetterAndSetterReordered[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong = (new SuperSuperSuperSuperSuperSuperLongClassName())
    ->some_very_long_member_expression;
new $superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong();
(new $superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong->superSupersuperSupersuperSupersuperSupersuperSuperLong())
    ->superSupersuperSupersuperSupersuperSupersuperSuperLong;
$test =
    $superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;
$test = $test =
    $superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;

`;

exports[`break-multiple.php - php-verify: break-multiple.php 1`] = `
<?php

$object->foo()->bar()->baz();

foo()->bar()->baz();

foo()->bar->baz();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$object
    ->foo()
    ->bar()
    ->baz();

foo()
    ->bar()
    ->baz();

foo()->bar->baz();

`;

exports[`conditional.php - php-verify: conditional.php 1`] = `
<?php


($a ? $b : $c)->d();

($a ? $b : $c)->d()->e();

($a ? $b : $c)->d()->e()->f();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($this->defaultUser))
->map();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($this->defaultUser))
->map()->filter();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody(defaultUser))
->map();

$object[$valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($defaultUser)
]->map();

(new TestClassWithReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName())
->map()->filter();

($testThingWithReallyLongName && $someOtherObject->withfunctionThatReturnsSomething())
->map()->filter();

($testThingWithReallyLongName && $someOtherObject->withlongPropThatReturnsSomething)
->map()->filter();

($testThingWithReallyLongName && new SomeObjectWithReallyReallyReallyReallyLongName())
->map()->filter();

($testThingWithReallyLongName && $test = new SomeObjectWithReallyReallyReallyLongName())
->map()->filter();

($testThingWithReallyLongName = new SomeObjectWithReallyReallyReallyReallyReallyReallyReallyReallyLongName())
->map()->filter();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

($a ? $b : $c)->d();

($a ? $b : $c)->d()->e();

($a ? $b : $c)
    ->d()
    ->e()
    ->f();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($this->defaultUser)
)->map();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($this->defaultUser)
)
    ->map()
    ->filter();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody(defaultUser)
)->map();

$object[
    $valid
        ? $helper->responseBody($this->currentUser)
        : $helper->responseBody($defaultUser)
]->map();

(new TestClassWithReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName())
    ->map()
    ->filter();

(
    $testThingWithReallyLongName &&
    $someOtherObject->withfunctionThatReturnsSomething()
)
    ->map()
    ->filter();

(
    $testThingWithReallyLongName &&
    $someOtherObject->withlongPropThatReturnsSomething
)
    ->map()
    ->filter();

(
    $testThingWithReallyLongName &&
    new SomeObjectWithReallyReallyReallyReallyLongName()
)
    ->map()
    ->filter();

(
    $testThingWithReallyLongName &&
    ($test = new SomeObjectWithReallyReallyReallyLongName())
)
    ->map()
    ->filter();

($testThingWithReallyLongName = new SomeObjectWithReallyReallyReallyReallyReallyReallyReallyReallyLongName())
    ->map()
    ->filter();

`;

exports[`logical.php - php-verify: logical.php 1`] = `
<?php

$someLongVariableName = (idx(
    $prop,
    ['foo' => 'bar', 'bar' => 'foo', 'foobar' => 'barfoor']
) || [])->map(function ($edge) { return $edge->node; });

($veryLongVeryLongVeryLong || $e)->map(function ($tickets) {
    $TicketRecord->createFromSomeLongString();
});

($veryLongVeryLongVeryLong || $e)->map(function ($tickets) {
  $TicketRecord->createFromSomeLongString();
})->filter(function ($obj) { return !!$obj; });

($veryLongVeryLongVeryLong || $anotherVeryLongVeryLongVeryLong || $veryVeryVeryLongError)->map(function ($tickets) {
    $TicketRecord ->createFromSomeLongString();
});

($veryLongVeryLongVeryLong || $anotherVeryLongVeryLongVeryLong || $veryVeryVeryLongError)->map(function ($tickets) {
  $TicketRecord->createFromSomeLongString();
})->filter(function ($obj) { return !!$obj; });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$someLongVariableName = (
    idx($prop, ['foo' => 'bar', 'bar' => 'foo', 'foobar' => 'barfoor']) || []
)->map(function ($edge) {
    return $edge->node;
});

($veryLongVeryLongVeryLong || $e)->map(function ($tickets) {
    $TicketRecord->createFromSomeLongString();
});

($veryLongVeryLongVeryLong || $e)
    ->map(function ($tickets) {
        $TicketRecord->createFromSomeLongString();
    })
    ->filter(function ($obj) {
        return !!$obj;
    });

(
    $veryLongVeryLongVeryLong ||
    $anotherVeryLongVeryLongVeryLong ||
    $veryVeryVeryLongError
)->map(function ($tickets) {
    $TicketRecord->createFromSomeLongString();
});

(
    $veryLongVeryLongVeryLong ||
    $anotherVeryLongVeryLongVeryLong ||
    $veryVeryVeryLongError
)
    ->map(function ($tickets) {
        $TicketRecord->createFromSomeLongString();
    })
    ->filter(function ($obj) {
        return !!$obj;
    });

`;

exports[`member_chain.php - php-verify: member_chain.php 1`] = `
<?php

one()->two();
one()
    ->two()
    ->three();
one()
    ->two->three()
    ->four->five();

Route::prefix('api')
    ->middleware('api')
    ->namespace($this->namespace)
    ->group(base_path('routes/api.php'));

return tap($this->forceFill([
    'approver_id' => $user instanceof User ? $user->id : $user,
    'approved_at' => $this->freshTimestamp(),
]))->save();

return collect(parent::jsonSerialize())->mapWithKeys(function ($value, $key) {
    return [camel_case($key) => $value];
})->toArray();

method()->then(function ($x) { return $x; })
  ["abc"](function ($x) { return $x; })
  [$abc](function ($x) { return $x; });

($a->a()->b());
($a)->a()->b();
$a->a()->b;
$a->b->a();
$a->b()->c()->d();
$a->b->c->d;

$this->loooooooooooong->lookup = (int) $this->getRequest()->getParam(
    'some-param'
);

$this->loooooooooooong->lookup = (int) $variable->getRequest()->getParam(
    'some-param'
);

$aVariable = $theThing
    ->aLongFunction(1, 2, 3)
    ->anotherReallyLongFunciton('a', 'b', 'c');

$anotherVariables = $theOtherThing
    ->aLongFunction(1, 2, 3, 4, 5, 6, 7)
    ->anotherReallyLongFunciton('a', 'b', 'c');

$aVariable = $theThing->veryVeryVeryVeryVeryVeryVeryVeryLongCall()->veryVeryVeryVeryVeryVeryVeryVery;
$aVariable = $theThing->veryVeryVeryVeryVeryVeryVeryVeryLongCall()->veryVeryVeryVeryVeryVeryVeryVery();

bar()();
bar('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong')();
bar()('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong');
bar('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong')()()()()();

$foo->bar()();
$foo->bar('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong')();
$foo->bar()('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong');
$foo->bar('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong')()()()()();

$brian->hotel->orders()->ordered()->with('smith')->get();
$brian::$hotel->orders()->ordered()->with('smith')->get();
$brian['hotel']->orders()->ordered()->with('smith')->get();
Foo::$hotel->orders()->ordered()->with('smith')->get();
(new Foo())->hotel->orders()->ordered()->with('smith')->get();
(clone $a)->hotel->orders()->ordered()->with('smith')->get();

$var = $brian->hotel->orders()->ordered()->with('smith')->get();
$var = $brian::$hotel->orders()->ordered()->with('smith')->get();
$var = $brian['hotel']->orders()->ordered()->with('smith')->get();
$var = Foo::$hotel->orders()->ordered()->with('smith')->get();
$var = (new Foo())->hotel->orders()->ordered()->with('smith')->get();
$var = (clone $a)->hotel->orders()->ordered()->with('smith')->get();

$var = Foo::keys($items)->filter(function ($x) { return $x > 2; })->map(function ($x) { return $x * 2; });

(new static(func_get_args()))->push($this)->each(function ($item) {
    VarDumper::dump($item);
});
(new static(func_get_args()))->offset(10)->push($this)->each(function ($item) {
    VarDumper::dump($item);
});
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

one()->two();
one()
    ->two()
    ->three();
one()
    ->two->three()
    ->four->five();

Route::prefix('api')
    ->middleware('api')
    ->namespace($this->namespace)
    ->group(base_path('routes/api.php'));

return tap(
    $this->forceFill([
        'approver_id' => $user instanceof User ? $user->id : $user,
        'approved_at' => $this->freshTimestamp()
    ])
)->save();

return collect(parent::jsonSerialize())
    ->mapWithKeys(function ($value, $key) {
        return [camel_case($key) => $value];
    })
    ->toArray();

method()
    ->then(function ($x) {
        return $x;
    })
    ["abc"](function ($x) {
        return $x;
    })
    [$abc](function ($x) {
        return $x;
    });

$a->a()->b();
$a->a()->b();
$a->a()->b;
$a->b->a();
$a
    ->b()
    ->c()
    ->d();
$a->b->c->d;

$this->loooooooooooong->lookup = (int) $this->getRequest()->getParam(
    'some-param'
);

$this->loooooooooooong->lookup = (int) $variable
    ->getRequest()
    ->getParam('some-param');

$aVariable = $theThing
    ->aLongFunction(1, 2, 3)
    ->anotherReallyLongFunciton('a', 'b', 'c');

$anotherVariables = $theOtherThing
    ->aLongFunction(1, 2, 3, 4, 5, 6, 7)
    ->anotherReallyLongFunciton('a', 'b', 'c');

$aVariable = $theThing->veryVeryVeryVeryVeryVeryVeryVeryLongCall()
    ->veryVeryVeryVeryVeryVeryVeryVery;
$aVariable = $theThing
    ->veryVeryVeryVeryVeryVeryVeryVeryLongCall()
    ->veryVeryVeryVeryVeryVeryVeryVery();

bar()();
bar(
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong'
)();
bar()(
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong'
);
bar(
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong'
)()()()()();

$foo->bar()();
$foo->bar(
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong'
)();
$foo->bar()(
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong'
);
$foo->bar(
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong'
)()()()()();

$brian->hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
$brian::$hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
$brian['hotel']
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
Foo::$hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
(new Foo())->hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
(clone $a)->hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();

$var = $brian->hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
$var = $brian::$hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
$var = $brian['hotel']
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
$var = Foo::$hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
$var = (new Foo())->hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();
$var = (clone $a)->hotel
    ->orders()
    ->ordered()
    ->with('smith')
    ->get();

$var = Foo::keys($items)
    ->filter(function ($x) {
        return $x > 2;
    })
    ->map(function ($x) {
        return $x * 2;
    });

(new static(func_get_args()))->push($this)->each(function ($item) {
    VarDumper::dump($item);
});
(new static(func_get_args()))
    ->offset(10)
    ->push($this)
    ->each(function ($item) {
        VarDumper::dump($item);
    });

`;

exports[`multiple-members.php - php-verify: multiple-members.php 1`] = `
<?php

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName')->then(function() {
    doSomething();
});

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName')->then(function() {
    doSomething();
});

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName', 'second argument that pushes this group past 80 characters')->then(function() {
    doSomething();
});

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName')->then(function() {
    doSomething();
});
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$wrapper
    ->find('SomewhatLongNodeName')
    ->prop('longPropFunctionName')
    ->then(function () {
        doSomething();
    });

$wrapper
    ->find('SomewhatLongNodeName')
    ->prop('longPropFunctionName')
    ->then(function () {
        doSomething();
    });

$wrapper
    ->find('SomewhatLongNodeName')
    ->prop(
        'longPropFunctionName',
        'second argument that pushes this group past 80 characters'
    )
    ->then(function () {
        doSomething();
    });

$wrapper
    ->find('SomewhatLongNodeName')
    ->prop('longPropFunctionName')
    ->then(function () {
        doSomething();
    });

`;

exports[`offsetlookup.php - php-verify: offsetlookup.php 1`] = `
<?php

$version = $someLongString
    ->split('jest version =')
    ->pop()
    ->split(EOL)[0]
    ->trim();

$component = find('.org-lclp-edit-copy-url-banner__link')[0]
    ->getAttribute('href')
    ->indexOf($this->landingPageLink);

nock('test')
    ->matchHeader('Accept', 'application/json')['string']('/foo')
    ->reply(200, [
        'foo' => 'bar'
    ]);

$data->forEach(function ($key) {
    $data['key']('foo')
        ->then(function () { $console->log('bar'); })
        ->catch(function () { $console->log('baz'); });
});

$data->forEach(function ($key) {
    $data('foo')[$key]('bar')
        ->then(function () { $console->log('bar'); })
        ->catch(function () { $console->log('baz'); });
});

$window->Data['key']("foo")
    ->then(function () { return $a; })
    ->catch(function () { return $b; });

$window->Data['key']['foo']("foo")
    ->then(function () { return $a; })
    ->catch(function () { return $b; });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$version = $someLongString
    ->split('jest version =')
    ->pop()
    ->split(EOL)[0]
    ->trim();

$component = find('.org-lclp-edit-copy-url-banner__link')[0]
    ->getAttribute('href')
    ->indexOf($this->landingPageLink);

nock('test')
    ->matchHeader('Accept', 'application/json')
    ['string']('/foo')
    ->reply(200, [
        'foo' => 'bar'
    ]);

$data->forEach(function ($key) {
    $data
        ['key']('foo')
        ->then(function () {
            $console->log('bar');
        })
        ->catch(function () {
            $console->log('baz');
        });
});

$data->forEach(function ($key) {
    $data('foo')
        [$key]('bar')
        ->then(function () {
            $console->log('bar');
        })
        ->catch(function () {
            $console->log('baz');
        });
});

$window->Data['key']("foo")
    ->then(function () {
        return $a;
    })
    ->catch(function () {
        return $b;
    });

$window->Data['key']
    ['foo']("foo")
    ->then(function () {
        return $a;
    })
    ->catch(function () {
        return $b;
    });

`;

exports[`staticlookup.php - php-verify: staticlookup.php 1`] = `
<?php
DB::table('identity')->insert([
    'ref' => $ref,
    'handle' => $handle
]);

DB::table('identity')->insert([
    'ref' => $ref,
    'handle' => $handle,
    'foo' => $bar,
    'bar' => $foo
]);

DB::table('identity')->insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName([
    'ref' => $ref,
    'handle' => $handle,
    'foo' => $bar,
    'bar' => $foo
]);

$page = TableRegistry
    ::get('Pages')
    ->findByPath($path)
    ->find('published')
    ->find('frontend')
    ->find('somethingElse')
    ->first();

Logger
    ::use_logger('albus')
    ->info('Albus: failed to find active version for albus object', [
        'uuid' => $uuid,
        'requested_date' => $date
    ]);

DBwithlongname::table('identity')->insertReallyReallyReallyLongName()->someOtherReallyReallyLong();

$DBwithlongname->table('identity')::insertReallyReallyReallyLongName()->someOtherReallyReallyLong();

$page = TableRegistry
    ::get('Pages')
    ::findByPath($path)
    ::find('published')
    ::find('frontend')
    ::find('somethingElse')
    ::first();

$page = TableRegistry
    ::insertReallyReallyReallyLongName('Pages')
    ::insertReallyReallyReallyLongName($path)
    ::insertReallyReallyReallyLongName('published')
    ::insertReallyReallyReallyLongName('frontend')
    ::insertReallyReallyReallyLongName('somethingElse')
    ::insertReallyReallyReallyLongName();

$page = TableRegistry::insertReallyReallyReallyLongName[0];
$page = TableRegistry::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];
$page = TableRegistry
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];
$page = TableRegistry
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];

$page = TableRegistry::insertReallyReallyReallyLongName('Pages')[0];
$page = TableRegistry::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName('Pages')[0];

$component = find('.org-lclp-edit-copy-url-banner__link')[0]
    ::getAttribute('href')
    ::indexOf($this->landingPageLink);

$component = Foo::test(['foo' => 'bar', 'bar' => 'foo', 'foobar' => 'barfoo', 'barfoo' => 'foobar']);
$component = Foo::$insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];

static
    ::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();
sTaTic
    ::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();
self
    ::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();
parent
    ::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();

Foo
    ::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
DB::table('identity')->insert([
    'ref' => $ref,
    'handle' => $handle
]);

DB::table('identity')->insert([
    'ref' => $ref,
    'handle' => $handle,
    'foo' => $bar,
    'bar' => $foo
]);

DB::table(
    'identity'
)->insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName([
    'ref' => $ref,
    'handle' => $handle,
    'foo' => $bar,
    'bar' => $foo
]);

$page = TableRegistry::get('Pages')
    ->findByPath($path)
    ->find('published')
    ->find('frontend')
    ->find('somethingElse')
    ->first();

Logger::use_logger('albus')->info(
    'Albus: failed to find active version for albus object',
    [
        'uuid' => $uuid,
        'requested_date' => $date
    ]
);

DBwithlongname::table('identity')
    ->insertReallyReallyReallyLongName()
    ->someOtherReallyReallyLong();

$DBwithlongname
    ->table('identity')
    ::insertReallyReallyReallyLongName()
    ->someOtherReallyReallyLong();

$page = TableRegistry::get('Pages')
    ::findByPath($path)
    ::find('published')
    ::find('frontend')
    ::find('somethingElse')
    ::first();

$page = TableRegistry::insertReallyReallyReallyLongName('Pages')
    ::insertReallyReallyReallyLongName($path)
    ::insertReallyReallyReallyLongName('published')
    ::insertReallyReallyReallyLongName('frontend')
    ::insertReallyReallyReallyLongName('somethingElse')
    ::insertReallyReallyReallyLongName();

$page = TableRegistry::insertReallyReallyReallyLongName[0];
$page =
    TableRegistry
        ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];
$page = TableRegistry::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];
$page = TableRegistry::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName()
    ::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];

$page = TableRegistry::insertReallyReallyReallyLongName('Pages')[0];
$page = TableRegistry::insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName(
    'Pages'
)[0];

$component = find('.org-lclp-edit-copy-url-banner__link')[0]
    ::getAttribute('href')
    ::indexOf($this->landingPageLink);

$component = Foo::test([
    'foo' => 'bar',
    'bar' => 'foo',
    'foobar' => 'barfoo',
    'barfoo' => 'foobar'
]);
$component =
    Foo
        ::$insertReallyReallyReallyReallyReallyReallyReallyReallyReallyLongName[0];

static::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();
static::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();
self::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();
parent::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();

Foo::viewFactory()
    ->make(
        $view ?: static::$defaultSimpleView,
        array_merge($data, [
            'paginator' => $this
        ])
    )
    ->render();

`;
