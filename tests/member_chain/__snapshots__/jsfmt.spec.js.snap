// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`break-last-call.php 1`] = `
<?php
function call($store) {
    return callApi($endpoint, $schema)->then(
        function ($response) {
            return next(actionWith([
                'response' => $response,
                'type' => $successType
            ]));
        },
        function ($error) {
            return next(actionWith([
                'type' => $failureType,
                'error' => $error->message || 'Something bad happened'
            ]));
        }
  );
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
function call($store)
{
    return callApi($endpoint, $schema)->then(function ($response) {
        return next(
            actionWith(['response' => $response, 'type' => $successType])
        );
    }, function ($error) {
        return next(
            actionWith([
                'type' => $failureType,
                'error' => $error->message || 'Something bad happened'
            ])
        );
    });
}

`;

exports[`break-last-member.php 1`] = `
<?php

$SomeVeryLongUpperCaseConstant->someVeryLongCallExpression()->some_very_long_member_expression;
$weNeedToReachTheEightyCharacterLimitXXXXXXXXXXXXXXXXX->someNode
->childrenInAnArray[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;
$superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered[0];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$SomeVeryLongUpperCaseConstant->someVeryLongCallExpression()->some_very_long_member_expression;
$weNeedToReachTheEightyCharacterLimitXXXXXXXXXXXXXXXXX->someNode->childrenInAnArray[0];
$superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered;
$superSupersuperSupersuperSupersuperSupersuperSuperLong->exampleOfOrderOfGetterAndSetterReordered[0];

`;

exports[`break-multiple.php 1`] = `
<?php

$object->foo()->bar()->baz();

foo()->bar()->baz();

foo()->bar->baz();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$object
    ->foo()
    ->bar()
    ->baz();

foo()
    ->bar()
    ->baz();

foo()->bar->baz();

`;

exports[`conditional.php 1`] = `
<?php


($a ? $b : $c)->d();

($a ? $b : $c)->d()->e();

($a ? $b : $c)->d()->e()->f();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($this->defaultUser))
->map();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($this->defaultUser))
->map()->filter();

($valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody(defaultUser))
->map();

$object[$valid
    ? $helper->responseBody($this->currentUser)
    : $helper->responseBody($defaultUser)
]->map();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
($a ? $b : $c)->d();

($a ? $b : $c)->d()->e();

($a ? $b : $c)
    ->d()
    ->e()
    ->f();

(
    $valid
        ? $helper->responseBody($this->currentUser)
        : $helper->responseBody($this->defaultUser)
)->map();

(
    $valid
        ? $helper->responseBody($this->currentUser)
        : $helper->responseBody($this->defaultUser)
)
    ->map()
    ->filter();

(
    $valid
        ? $helper->responseBody($this->currentUser)
        : $helper->responseBody(defaultUser)
)->map();

$object[
    $valid
        ? $helper->responseBody($this->currentUser)
        : $helper->responseBody($defaultUser)
]->map();

`;

exports[`logical.php 1`] = `
<?php

$someLongVariableName = (idx(
    $prop,
    ['foo' => 'bar', 'bar' => 'foo', 'foobar' => 'barfoor']
) || [])->map(function ($edge) { return $edge->node; });

($veryLongVeryLongVeryLong || $e)->map(function ($tickets) {
    $TicketRecord->createFromSomeLongString();
});

($veryLongVeryLongVeryLong || $e)->map(function ($tickets) {
  $TicketRecord->createFromSomeLongString();
})->filter(function ($obj) { return !!$obj; });

($veryLongVeryLongVeryLong || $anotherVeryLongVeryLongVeryLong || $veryVeryVeryLongError)->map(function ($tickets) {
    $TicketRecord ->createFromSomeLongString();
});

($veryLongVeryLongVeryLong || $anotherVeryLongVeryLongVeryLong || $veryVeryVeryLongError)->map(function ($tickets) {
  $TicketRecord->createFromSomeLongString();
})->filter(function ($obj) { return !!$obj; });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$someLongVariableName = (
    idx($prop, ['foo' => 'bar', 'bar' => 'foo', 'foobar' => 'barfoor']) || []
)->map(function ($edge) {
    return $edge->node;
});

($veryLongVeryLongVeryLong || $e)->map(function ($tickets) {
    $TicketRecord->createFromSomeLongString();
});

($veryLongVeryLongVeryLong || $e)
    ->map(function ($tickets) {
        $TicketRecord->createFromSomeLongString();
    })
    ->filter(function ($obj) {
        return !!$obj;
    });

(
    $veryLongVeryLongVeryLong ||
    $anotherVeryLongVeryLongVeryLong ||
    $veryVeryVeryLongError
)->map(function ($tickets) {
    $TicketRecord->createFromSomeLongString();
});

(
    $veryLongVeryLongVeryLong ||
    $anotherVeryLongVeryLongVeryLong ||
    $veryVeryVeryLongError
)
    ->map(function ($tickets) {
        $TicketRecord->createFromSomeLongString();
    })
    ->filter(function ($obj) {
        return !!$obj;
    });

`;

exports[`member_chain.php 1`] = `
<?php

one()->two();
one()
    ->two()
    ->three();
one()
    ->two->three()
    ->four->five();

Route::prefix('api')
    ->middleware('api')
    ->namespace($this->namespace)
    ->group(base_path('routes/api.php'));

return tap($this->forceFill([
    'approver_id' => $user instanceof User ? $user->id : $user,
    'approved_at' => $this->freshTimestamp(),
]))->save();

return collect(parent::jsonSerialize())->mapWithKeys(function ($value, $key) {
    return [camel_case($key) => $value];
})->toArray();

method()->then(function ($x) { return $x; })
  ["abc"](function ($x) { return $x; })
  [$abc](function ($x) { return $x; });

($a->a()->b());
($a)->a()->b();
$a->a()->b;
$a->b->a();
$a->b()->c()->d();
$a->b->c->d;

$this->loooooooooooong->lookup = (int) $this->getRequest()->getParam(
    'some-param'
);

$this->loooooooooooong->lookup = (int) $variable->getRequest()->getParam(
    'some-param'
);

$aVariable = $theThing
    ->aLongFunction(1, 2, 3)
    ->anotherReallyLongFunciton('a', 'b', 'c');

$anotherVariables = $theOtherThing
    ->aLongFunction(1, 2, 3, 4, 5, 6, 7)
    ->anotherReallyLongFunciton('a', 'b', 'c');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
one()->two();
one()
    ->two()
    ->three();
one()
    ->two->three()
    ->four->five();

Route
    ::prefix('api')
    ->middleware('api')
    ->namespace($this->namespace)
    ->group(base_path('routes/api.php'));

return tap(
    $this->forceFill([
        'approver_id' => $user instanceof User ? $user->id : $user,
        'approved_at' => $this->freshTimestamp()
    ])
)->save();

return collect(parent::jsonSerialize())
    ->mapWithKeys(function ($value, $key) {
        return [camel_case($key) => $value];
    })
    ->toArray();

method()->then(function ($x) {
    return $x;
})["abc"](function ($x) {
    return $x;
})[$abc](function ($x) {
    return $x;
});

($a->a()->b());
($a)->a()->b();
$a->a()->b;
$a->b->a();
$a
    ->b()
    ->c()
    ->d();
$a->b->c->d;

$this->loooooooooooong->lookup = (int) $this->getRequest()->getParam(
    'some-param'
);

$this->loooooooooooong->lookup = (int) $variable
    ->getRequest()
    ->getParam('some-param');

$aVariable = $theThing
    ->aLongFunction(1, 2, 3)
    ->anotherReallyLongFunciton('a', 'b', 'c');

$anotherVariables = $theOtherThing
    ->aLongFunction(1, 2, 3, 4, 5, 6, 7)
    ->anotherReallyLongFunciton('a', 'b', 'c');

`;

exports[`multiple-members.php 1`] = `
<?php

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName')->then(function() {
    doSomething();
});

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName')->then(function() {
    doSomething();
});

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName', 'second argument that pushes this group past 80 characters')->then(function() {
    doSomething();
});

$wrapper->find('SomewhatLongNodeName')->prop('longPropFunctionName')->then(function() {
    doSomething();
});
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$wrapper
    ->find('SomewhatLongNodeName')
    ->prop('longPropFunctionName')
    ->then(function () {
        doSomething();
    });

$wrapper
    ->find('SomewhatLongNodeName')
    ->prop('longPropFunctionName')
    ->then(function () {
        doSomething();
    });

$wrapper
    ->find('SomewhatLongNodeName')
    ->prop(
        'longPropFunctionName',
        'second argument that pushes this group past 80 characters'
    )
    ->then(function () {
        doSomething();
    });

$wrapper
    ->find('SomewhatLongNodeName')
    ->prop('longPropFunctionName')
    ->then(function () {
        doSomething();
    });

`;

exports[`offsetlookup.php 1`] = `
<?php

$version = $someLongString
    ->split('jest version =')
    ->pop()
    ->split(EOL)[0]
    ->trim();

$component = find('.org-lclp-edit-copy-url-banner__link')[0]
    ->getAttribute('href')
    ->indexOf($this->landingPageLink);

nock('test')
    ->matchHeader('Accept', 'application/json')['string']('/foo')
    ->reply(200, [
        'foo' => 'bar'
    ]);

$data->forEach(function ($key) {
    $data['key']('foo')
        ->then(function () { $console->log('bar'); })
        ->catch(function () { $console->log('baz'); });
});

$data->forEach(function ($key) {
    $data('foo')[$key]('bar')
        ->then(function () { $console->log('bar'); })
        ->catch(function () { $console->log('baz'); });
});

$window->Data['key']("foo")
    ->then(function () { return $a; })
    ->catch(function () { return $b; });

$window->Data['key']['foo']("foo")
    ->then(function () { return $a; })
    ->catch(function () { return $b; });
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$version = $someLongString
    ->split('jest version =')
    ->pop()
    ->split(EOL)[0]
    ->trim();

$component = find('.org-lclp-edit-copy-url-banner__link')[0]
    ->getAttribute('href')
    ->indexOf($this->landingPageLink);

nock('test')
    ->matchHeader('Accept', 'application/json')
    ['string']('/foo')
    ->reply(200, ['foo' => 'bar']);

$data->forEach(function ($key) {
    $data
        ['key']('foo')
        ->then(function () {
            $console->log('bar');
        })
        ->catch(function () {
            $console->log('baz');
        });
});

$data->forEach(function ($key) {
    $data('foo')
        [$key]('bar')
        ->then(function () {
            $console->log('bar');
        })
        ->catch(function () {
            $console->log('baz');
        });
});

$window->Data['key']("foo")
    ->then(function () {
        return $a;
    })
    ->catch(function () {
        return $b;
    });

$window->Data['key']
    ['foo']("foo")
    ->then(function () {
        return $a;
    })
    ->catch(function () {
        return $b;
    });

`;
