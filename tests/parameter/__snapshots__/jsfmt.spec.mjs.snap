// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parameter.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

function foo($arg)
{
    return $arg;
}

function foo1(&$arg)
{
    return $arg;
}

function makecoffee($type = "cappuccino")
{
    return "Making a cup of $type.\\n";
}

function makecoffee1($types = array("cappuccino"), $coffeeMaker = NULL)
{
    $device = is_null($coffeeMaker) ? "hands" : $coffeeMaker;
    return "Making a cup of ".join(", ", $types)." with $device.\\n";
}

function f(C $c) {
    echo get_class($c)."\\n";
}

function f1(C $c = null) {
    var_dump($c);
}

function sum(int $a, int $b) {
    return $a + $b;
}

function sum1(...$numbers) {
    $acc = 0;
    foreach ($numbers as $n) {
        $acc += $n;
    }
    return $acc;
}

function total_intervals($unit, DateInterval ...$intervals) {
    $time = 0;
    foreach ($intervals as $interval) {
        $time += $interval->$unit;
    }
    return $time;
}

function testReturn(?string $name): ?string
{
    return $name;
}

function intArg(int $c = 111111111111111111111111111111111111111111111111111111111111111111111111) {
    var_dump($c);
}

function bar($arg = array("veryVeryVeryVeryVeryVeryVeryVeryVeryLongString", "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString", "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString"))
{
    return $arg;
}

function bar1(
    $arg = array(
        "key1" => "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",

        "key2" => "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",

        "key3" => "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
    )
) {
    return $arg;
}

function bar2($arg = "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString" . "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString" . "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString")
{
    return $arg;
}

function bar3($arg = "veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" ? "1" : "2")
{
    return $arg;
}

function bar4(string $arg = "veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString" ? "1" : "2")
{
    return $arg;
}

function bar5($arg = "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString" === "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString" ? "1" : "2")
{
    return $arg;
}

function foo($arg = 'string
string
string') {}

function foo($arg = 'string
string
string', $arg = 'string
string
string') {}

function foo($a, $b = 'string
string
string', $c) {}

=====================================output=====================================
<?php

function foo($arg)
{
    return $arg;
}

function foo1(&$arg)
{
    return $arg;
}

function makecoffee($type = "cappuccino")
{
    return "Making a cup of $type.\\n";
}

function makecoffee1($types = ["cappuccino"], $coffeeMaker = null)
{
    $device = is_null($coffeeMaker) ? "hands" : $coffeeMaker;
    return "Making a cup of " . join(", ", $types) . " with $device.\\n";
}

function f(C $c)
{
    echo get_class($c) . "\\n";
}

function f1(C $c = null)
{
    var_dump($c);
}

function sum(int $a, int $b)
{
    return $a + $b;
}

function sum1(...$numbers)
{
    $acc = 0;
    foreach ($numbers as $n) {
        $acc += $n;
    }
    return $acc;
}

function total_intervals($unit, DateInterval ...$intervals)
{
    $time = 0;
    foreach ($intervals as $interval) {
        $time += $interval->$unit;
    }
    return $time;
}

function testReturn(?string $name): ?string
{
    return $name;
}

function intArg(
    int $c = 111111111111111111111111111111111111111111111111111111111111111111111111
) {
    var_dump($c);
}

function bar(
    $arg = [
        "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
        "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
        "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
    ]
) {
    return $arg;
}

function bar1(
    $arg = [
        "key1" => "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",

        "key2" => "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",

        "key3" => "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString",
    ]
) {
    return $arg;
}

function bar2(
    $arg =
        "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
            "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString" .
            "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
) {
    return $arg;
}

function bar3(
    $arg = "veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
        ? "1"
        : "2"
) {
    return $arg;
}

function bar4(
    string $arg = "veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
        ? "1"
        : "2"
) {
    return $arg;
}

function bar5(
    $arg =
        "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString" ===
        "veryVeryVeryVeryVeryVeryVeryVeryVeryLongString"
            ? "1"
            : "2"
) {
    return $arg;
}

function foo(
    $arg = 'string
string
string'
) {
}

function foo(
    $arg = 'string
string
string',
    $arg = 'string
string
string'
) {
}

function foo(
    $a,
    $b = 'string
string
string',
    $c
) {
}

================================================================================
`;

exports[`spec.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

// Empty parameter_list
function func1() {}
// parameter_list
function func2($arg) {}
function func3($arg, $arg1, $arg2) {}
// optional_type
function func4(array $arg) {}
function func5(callable $arg) {}
function func6(float $arg) {}
function func7(ArrayAccess $arg) {}
function func8(Foo\\Bar $arg) {}
function func9(Foo\\Bar\\Baz $arg) {}
function func10(namespace\\Foo $arg) {}
function func11(namespace\\Foo\\Bar $arg) {}
function func12(namespace\\Foo\\Bar\\Baz $arg) {}
function func13(\\Foo $arg) {}
function func14(\\Foo\\Baz $arg) {}
function func15(\\Foo\\Baz\\Baz $arg) {}
function func16(?array $arg) {}
function func17(?ArrayAccess $arg) {}
function func18(?Foo\\ArrayAccess $arg) {}
function func19(?\\Foo\\ArrayAccess $arg) {}
// is_reference
function func20(array &$arg) {}
function func21(?array &$arg) {}
// is_variadic
function func22(array &...$arg) {}
function func23(?array &...$arg) {}
// T_VARIABLE '=' expr
function func24(string $arg = 'test') {}
function func25(?string &$arg = 'test') {}
function func26(?array &$arg = ['1', '2', '3']) {}
function func27(array &...$arg) {}
function func28(?array &...$arg ) {}

class Foo extends ArrayIterator {
    function func1(?self $arg) {}
    function func2(?parent $arg) {}
}
=====================================output=====================================
<?php

// Empty parameter_list
function func1()
{
}
// parameter_list
function func2($arg)
{
}
function func3($arg, $arg1, $arg2)
{
}
// optional_type
function func4(array $arg)
{
}
function func5(callable $arg)
{
}
function func6(float $arg)
{
}
function func7(ArrayAccess $arg)
{
}
function func8(Foo\\Bar $arg)
{
}
function func9(Foo\\Bar\\Baz $arg)
{
}
function func10(namespace\\Foo $arg)
{
}
function func11(namespace\\Foo\\Bar $arg)
{
}
function func12(namespace\\Foo\\Bar\\Baz $arg)
{
}
function func13(\\Foo $arg)
{
}
function func14(\\Foo\\Baz $arg)
{
}
function func15(\\Foo\\Baz\\Baz $arg)
{
}
function func16(?array $arg)
{
}
function func17(?ArrayAccess $arg)
{
}
function func18(?Foo\\ArrayAccess $arg)
{
}
function func19(?\\Foo\\ArrayAccess $arg)
{
}
// is_reference
function func20(array &$arg)
{
}
function func21(?array &$arg)
{
}
// is_variadic
function func22(array &...$arg)
{
}
function func23(?array &...$arg)
{
}
// T_VARIABLE '=' expr
function func24(string $arg = "test")
{
}
function func25(?string &$arg = "test")
{
}
function func26(?array &$arg = ["1", "2", "3"])
{
}
function func27(array &...$arg)
{
}
function func28(?array &...$arg)
{
}

class Foo extends ArrayIterator
{
    function func1(?self $arg)
    {
    }
    function func2(?parent $arg)
    {
    }
}

================================================================================
`;
