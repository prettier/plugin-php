// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array.php 1`] = `
<?php

array();
(array());

[];
([]);

$var = array();
$var = (array());

$var = [];
$var = ([]);

$var = array("1", "2", "3");
$var = (array("1", "2", "3"));
$var = array(array("1"), array("2"), array("3"));
$var = (array(array("1"), array("2"), array("3")));
$var = array((array("1")), (array("2")), (array("3")));
$var = (array((array("1")), (array("2")), (array("3"))));

$var = array("foo", "bar")();
$var = (array("foo", "bar"))();
$var = ((array("foo", "bar")))();

$var = ["foo", "bar"]();
$var = (["foo", "bar"])();
$var = ((["foo", "bar"]))();

$arr = [$var, $other_var];
$arr = [($var), ($other_var)];
$arr = [('key') => ($var), ('other-key') => ($other_var)];
$arr = ([('key') => ($var), ('other-key') => ($other_var)]);

[$var, $other_var] = $arr;
[($var), ($other_var)] = $arr;
[('key') => ($var), ('other-key') => ($other_var)] = $arr;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

array();
array();

[];
[];

$var = array();
$var = array();

$var = [];
$var = [];

$var = array("1", "2", "3");
$var = array("1", "2", "3");
$var = array(array("1"), array("2"), array("3"));
$var = array(array("1"), array("2"), array("3"));
$var = array(array("1"), array("2"), array("3"));
$var = array(array("1"), array("2"), array("3"));

$var = (array("foo", "bar"))();
$var = (array("foo", "bar"))();
$var = (array("foo", "bar"))();

$var = (["foo", "bar"])();
$var = (["foo", "bar"])();
$var = (["foo", "bar"])();

$arr = [$var, $other_var];
$arr = [$var, $other_var];
$arr = ['key' => $var, 'other-key' => $other_var];
$arr = ['key' => $var, 'other-key' => $other_var];

[$var, $other_var] = $arr;
[$var, $other_var] = $arr;
['key' => $var, 'other-key' => $other_var] = $arr;

`;

exports[`assign.php 1`] = `
<?php

$var = 1;
($var = 1);

$var = $var;
($var = $var);

$var = $var = $var;
$var = ($var = $var);
($var = ($var = $var));

$var = $var += 1;
$var = ($var += 1);

$var = ($var = 4) + 5;
$var = ($var = ['key' => 'value']);

($var = $var ? $var : function() { return 0; });

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

for (($i = 1); ($i <= 10); ($i++)) {
    echo $i;
}
for (($i = 1), ($j = 0); ($i <= 10); ($j += $i), print ($i), ($i++));

if ($a = 1) {}

while ($var = 1) {}
while ($var = current($array) !== FALSE) {}
while (($var = current($array)) !== FALSE) {}

$var = $var || $var = new MyClass();
$var = $var || ($var = new MyClass());

if (true) $var = $var;
if (true) ($var = $var);
if (true) { ($var = $var); } else if (false) ($var = $var);
if (true) { ($var = $var); } else if (false) { ($var = $var); } else ($var = $var);

if (true) {
    $var = $var;
    ($var = $var);
}

while ($i <= 10) $i = 1;
while ($i <= 10) ($i = 1);

do {
    echo $i;
} while ($i = 0);

for ($i = 1; $i <= 10; $i++) $i = 1;
for ($i = 1; $i <= 10; $i++) ($i = 1);

foreach ($arr as &$value) $value = $value * 2;
foreach ($arr as &$value) ($value = $value * 2);

switch ($i = 1) {
    case 0:
        echo "i equals 0";
        break;
    case 1:
        echo "i equals 1";
        break;
    case 2:
        echo "i equals 2";
        break;
}

switch (($i = 1)) {
    case 0:
        echo "i equals 0";
        break;
    case 1:
        echo "i equals 1";
        break;
    case 2:
        echo "i equals 2";
        break;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var = 1;
$var = 1;

$var = $var;
$var = $var;

$var = $var = $var;
$var = $var = $var;
$var = $var = $var;

$var = $var += 1;
$var = $var += 1;

$var = ($var = 4) + 5;
$var = $var = ['key' => 'value'];

$var = $var
    ? $var
    : function () {
        return 0;
    };

for ($i = 1; $i <= 10; $i++) {
    echo $i;
}

for ($i = 1; ($i <= 10); $i++) {
    echo $i;
}
for ($i = 1, $j = 0; ($i <= 10); $j += $i, print $i, $i++);

if ($a = 1) {
}

while ($var = 1) {
}
while ($var = current($array) !== false) {
}
while (($var = current($array)) !== false) {
}

$var = $var || ($var = new MyClass());
$var = $var || ($var = new MyClass());

if (true) {
    $var = $var;
}
if (true) {
    $var = $var;
}
if (true) {
    $var = $var;
} elseif (false) {
    $var = $var;
}
if (true) {
    $var = $var;
} elseif (false) {
    $var = $var;
} else {
    $var = $var;
}

if (true) {
    $var = $var;
    $var = $var;
}

while ($i <= 10) {
    $i = 1;
}
while ($i <= 10) {
    $i = 1;
}

do {
    echo $i;
} while ($i = 0);

for ($i = 1; $i <= 10; $i++) {
    $i = 1;
}
for ($i = 1; $i <= 10; $i++) {
    $i = 1;
}

foreach ($arr as &$value) {
    $value = $value * 2;
}
foreach ($arr as &$value) {
    $value = $value * 2;
}

switch ($i = 1) {
    case 0:
        echo "i equals 0";
        break;
    case 1:
        echo "i equals 1";
        break;
    case 2:
        echo "i equals 2";
        break;
}

switch ($i = 1) {
    case 0:
        echo "i equals 0";
        break;
    case 1:
        echo "i equals 1";
        break;
    case 2:
        echo "i equals 2";
        break;
}

`;

exports[`bin.php 1`] = `
<?php

$var = 1;
($var = 1);
$var = $var = 1;
$var = ($var = 1);
($var = $var = 1);
($var = ($var = 1));
$var = $var = $var = $var;
$var = $var = ($var = $var);
$var = ($var = $var = $var);
$var = ($var = ($var = $var));
($var = ($var = ($var = $var)));

$var = $var++;
$var = ($var++);
$var = ++$var;
$var = (++$var);

$var = $var--;
$var = ($var--);
$var = --$var;
$var = (--$var);

$var = ~$var;
$var = (~$var);

$var = !$var;
$var = (!$var);

$var = $var += 10;
$var = ($var += 10);

$var = 10 + 20 + 30;
$var = (10 + 20) + 30;
$var = 10 + (20 + 30);

$var = '10' . '20' . '30';
$var = ('10' . '20') . '30';
$var = '10' . ('20' . '30');

$var = 10 + 20 % 30;
$var = (10 + 20) % 30;
$var = 10 + (20 % 30);

$var = 10 ** 20 ** 30;
$var = (10 ** 20) ** 30;
$var = 10 ** (20 ** 30);

$var = (10 == 20) == 30;
$var = 10 == (20 == 30);

$var = (10 === 20) === 30;
$var = 10 === (20 === 30);

$var = 10 * 20 % 30;
$var = (10 * 20) % 30;
$var = 10 * (20 % 30);

$var = 10 * 20 / 30;
$var = (10 * 20) / 30;
$var = 10 * (20 / 30);

$var = 10 / 20 * 30;
$var = (10 / 20) * 30;
$var = 10 / (20 * 30);

$var = 10 << 20 << 30;
$var = (10 << 20) << 30;
$var = 10 << (20 << 30);

$var = 10 >> 20 >> 30;
$var = (10 >> 20) >> 30;
$var = 10 >> (20 >> 30);

$var = 10 ^ 20 ^ 30;
$var = (10 ^ 20) ^ 30;
$var = 10 ^ (20 ^ 30);

$var = 10 | 20 | 30;
$var = (10 | 20) | 30;
$var = 10 | (20 | 30);

$var = false || true;
$var = (false || true);
$var = false or true;
$var = (false or true);
$var = true && false;
$var = (true && false);
$var = true and false;
$var = (true and false);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var = 1;
$var = 1;
$var = $var = 1;
$var = $var = 1;
$var = $var = 1;
$var = $var = 1;
$var = $var = $var = $var;
$var = $var = $var = $var;
$var = $var = $var = $var;
$var = $var = $var = $var;
$var = $var = $var = $var;

$var = $var++;
$var = $var++;
$var = ++$var;
$var = ++$var;

$var = $var--;
$var = $var--;
$var = --$var;
$var = --$var;

$var = ~$var;
$var = ~$var;

$var = !$var;
$var = !$var;

$var = $var += 10;
$var = $var += 10;

$var = 10 + 20 + 30;
$var = 10 + 20 + 30;
$var = 10 + (20 + 30);

$var = '10' . '20' . '30';
$var = '10' . '20' . '30';
$var = '10' . ('20' . '30');

$var = 10 + 20 % 30;
$var = (10 + 20) % 30;
$var = 10 + (20 % 30);

$var = 10 ** 20 ** 30;
$var = (10 ** 20) ** 30;
$var = 10 ** (20 ** 30);

$var = (10 == 20) == 30;
$var = 10 == (20 == 30);

$var = (10 === 20) === 30;
$var = 10 === (20 === 30);

$var = 10 * 20 % 30;
$var = (10 * 20) % 30;
$var = 10 * (20 % 30);

$var = 10 * 20 / 30;
$var = (10 * 20) / 30;
$var = 10 * (20 / 30);

$var = 10 / 20 * 30;
$var = (10 / 20) * 30;
$var = 10 / (20 * 30);

$var = 10 << 20 << 30;
$var = (10 << 20) << 30;
$var = 10 << (20 << 30);

$var = 10 >> 20 >> 30;
$var = (10 >> 20) >> 30;
$var = 10 >> (20 >> 30);

$var = 10 ^ 20 ^ 30;
$var = 10 ^ 20 ^ 30;
$var = 10 ^ (20 ^ 30);

$var = 10 | 20 | 30;
$var = 10 | 20 | 30;
$var = 10 | (20 | 30);

$var = false || true;
$var = (false || true);
($var = false) or true;
$var = (false or true);
$var = true && false;
$var = (true && false);
($var = true) and false;
$var = (true and false);

`;

exports[`block.php 1`] = `
<?php

function foo() {
    ($a->c());
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function foo()
{
    $a->c();
}

`;

exports[`break.php 1`] = `
<?php

break;
break 1;
break (1);
break ((1));
break (((1)));
break 2;
break (2);
break ((2));
break (((2)));
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

break;
break;
break;
break;
break;
break 2;
break 2;
break 2;
break 2;

`;

exports[`call.php 1`] = `
<?php

call();
(call());

$var = call();
$var = (call());
$var = call()();
$var = (call())();
$var = (call()());
$var = ((call())());

$var = $foo->call();
$var = ($foo)->call();
$var = ($foo->call());
$var = $foo->call()->call();
$var = ($foo)->call()->call();
$var = (($foo)->call())->call();
$var = ((($foo)->call())->call());

$var = call((call()));
$var = call(...(call()));
$var = (call((call())));
$var = (call((call()), (call())));

$var = $func();
$var = ($func)();
$var = ($func());
$var = (($func)());

$var = $this->$name();
$var = ($this)->$name();
$var = ($this->$name());
$var = (($this)->$name());

$var = Foo::call();
$var = (Foo::call());

$var = (array("Foo", "bar"))();
$var = (array(new Foo, "baz"))();
$var = ((string) 1234)();
$var = "Foo::bar"();
$var = ("Foo::bar")();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

call();
call();

$var = call();
$var = call();
$var = call()();
$var = call()();
$var = call()();
$var = call()();

$var = $foo->call();
$var = $foo->call();
$var = $foo->call();
$var = $foo->call()->call();
$var = $foo->call()->call();
$var = $foo->call()->call();
$var = $foo->call()->call();

$var = call(call());
$var = call(...call());
$var = call(call());
$var = call(call(), call());

$var = $func();
$var = $func();
$var = $func();
$var = $func();

$var = $this->$name();
$var = $this->$name();
$var = $this->$name();
$var = $this->$name();

$var = Foo::call();
$var = Foo::call();

$var = (array("Foo", "bar"))();
$var = (array(new Foo(), "baz"))();
$var = ((string) 1234)();
$var = ("Foo::bar")();
$var = ("Foo::bar")();

`;

exports[`cast.php 1`] = `
<?php

(int) '1';
( int ) '1';
((int) '1');
((int) ('1'));

$var = (int) '1';
$var = ((int) '1');
$var = ((int) ('1'));
$var = ((bool) (2.3e5));
$var = (object) [];
$var = (object) ([]);
$var = ((object) ([]));
$var = ((object) (array('1' => 'foo')));
$var = ((object) (['1' => 'foo']));
$var = ((object) 'ciao')->scalar;
$var = ((object) array('test'))->{'0'};
$var = (((object) array('test'))->{'0'});
$var = (array) new B();
$var = (array) (new B());
$var = ((array) (new B()));
$var = ((array) (new B()))['foo'];
$var = ((string) 1234)[1];
$var = ((string) 123)();
$var = ((string) (123))();
$var = "test"[0];
$var = (array) "test"[0];
$var = ((array) "test")[0];
$var = [(int) 'key' => (int) '1'];
$var = [((int) 'key') => ((int) '1')];
$var = ([((int) 'key') => ((int) '1')]);
$var = (int) $raw['data'] + $value;
$var = ((int) $raw['data']) + $value;
$var = (bool) $var ? 1 : 2;
$var = (bool) $var + 1 ? 1 : 2;
$var = ((bool) $var) + 1 ? 1 : 2;
$var = (bool) ($var + 1) ? 1 : 2;
$var = ((bool) $var) ? 1 : 2;
$var = ((bool) $var) ? (bool) 1 :  (bool) 2;
$var = ((bool) $var) ? ((bool) 1) :  ((bool) 2);
$var = ((bool) $var) ? (bool) 1 + 2 :  (bool) 2 + 3;
$var = ((bool) $var) ? ((bool) 1 + 2) :  ((bool) 2 + 3);
$var = ((bool) $var) ? (bool) $var ? 1 : 2 :  (bool) $var ? 1 : 2;
$var = ((bool) $var) ? (bool) ($var ? 1 : 2) :  (bool) ($var ? 1 : 2);
$var = (bool) ($var ? (bool) ($var ? 1 : 2) :  (bool) ($var ? 1 : 2));

if ((int) 1 === 1) {}
if (1 === (int) 1) {}
if (((int) 1) === 1) {}
if (1 === ((int) 1)) {}
if ((int) 1 === (int) 1) {}
if (((int) 1) === (int) 1) {}
if ((int) 1 === ((int) 1)) {}
if (((int) (1)) === ((int) 1)) {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

(int) '1';
(int) '1';
(int) '1';
(int) '1';

$var = (int) '1';
$var = (int) '1';
$var = (int) '1';
$var = (bool) 2.3e5;
$var = (object) [];
$var = (object) [];
$var = (object) [];
$var = (object) array('1' => 'foo');
$var = (object) ['1' => 'foo'];
$var = ((object) 'ciao')->scalar;
$var = ((object) array('test'))->{'0'};
$var = (((object) array('test'))->{'0'});
$var = (array) new B();
$var = (array) new B();
$var = (array) new B();
$var = ((array) new B())['foo'];
$var = ((string) 1234)[1];
$var = ((string) 123)();
$var = ((string) 123)();
$var = "test"[0];
$var = (array) "test"[0];
$var = ((array) "test")[0];
$var = [(int) 'key' => (int) '1'];
$var = [(int) 'key' => (int) '1'];
$var = [(int) 'key' => (int) '1'];
$var = (int) ($raw['data'] + $value);
$var = ((int) $raw['data']) + $value;
$var = (bool) ($var ? 1 : 2);
$var = (bool) ($var + 1 ? 1 : 2);
$var = ((bool) $var) + 1 ? 1 : 2;
$var = (bool) (($var + 1) ? 1 : 2);
$var = (bool) $var ? 1 : 2;
$var = (bool) $var ? (bool) 1 : (bool) 2;
$var = (bool) $var ? (bool) 1 : (bool) 2;
$var = (bool) $var ? (bool) (1 + 2) : (bool) (2 + 3);
$var = (bool) $var ? (bool) (1 + 2) : (bool) (2 + 3);
$var = (bool) $var ? (bool) ($var ? 1 : 2) : (bool) ($var ? 1 : 2);
$var = (bool) $var ? (bool) ($var ? 1 : 2) : (bool) ($var ? 1 : 2);
$var = (bool) ($var ? (bool) ($var ? 1 : 2) : (bool) ($var ? 1 : 2));

if ((int) (1 === 1)) {
}
if (1 === ((int) 1)) {
}
if (((int) 1) === 1) {
}
if (1 === ((int) 1)) {
}
if ((int) (1 === ((int) 1))) {
}
if (((int) 1) === ((int) 1)) {
}
if ((int) (1 === ((int) 1))) {
}
if (((int) 1) === ((int) 1)) {
}

`;

exports[`continue.php 1`] = `
<?php

continue;
continue 1;
continue (1);
continue ((1));
continue (((1)));
continue 2;
continue (2);
continue ((2));
continue (((2)));
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

continue;
continue;
continue;
continue;
continue;
continue 2;
continue 2;
continue 2;
continue 2;

`;

exports[`control-structures.php 1`] = `
<?php

if (($a > $b)) {
    echo "a is bigger than b";
} elseif (($a == $b)) {
    echo "a is equal to b";
} else {
    echo "a is smaller than b";
}

while (($i <= 10)) {
    echo $i++;
}

do {
    echo $i;
} while (($i > 0));

switch (($i)) {
    case (0):
        echo "i equals 0";
        break;
    case ((1)):
        echo "i equals 1";
        break;
    case ('test' . ( 1 > 2 ? 'foo' : 'bar')):
        echo "i equals 2";
        break;
}

switch (($i + 1)) {
    case (0):
        echo "i equals 0";
        break;
    case (1 + 2):
        echo "i equals 1";
        break;
    case (1 + ( 1 > 2 ? 1 : 3)):
        echo "i equals 2";
        break;
}

while (++$i) {
    switch ($i) {
        case 5:
            echo "At 5<br />\\n";
            break (2);  /* Exit only the switch. */
        case 10:
            echo "At 10; quitting<br />\\n";
            break ((4));  /* Exit the switch and the while. */
        default:
            break;
    }
}

while ($i++ < 5) {
    echo "Outer<br />\\n";
    while (1) {
        echo "Middle<br />\\n";
        while (1) {
            echo "Inner<br />\\n";
            continue (3);
        }
        echo "This never gets output.<br />\\n";
        continue ((2));
    }
    echo "Neither does this.<br />\\n";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

if ($a > $b) {
    echo "a is bigger than b";
} elseif ($a == $b) {
    echo "a is equal to b";
} else {
    echo "a is smaller than b";
}

while ($i <= 10) {
    echo $i++;
}

do {
    echo $i;
} while ($i > 0);

switch ($i) {
    case 0:
        echo "i equals 0";
        break;
    case 1:
        echo "i equals 1";
        break;
    case 'test' . (1 > 2 ? 'foo' : 'bar'):
        echo "i equals 2";
        break;
}

switch ($i + 1) {
    case 0:
        echo "i equals 0";
        break;
    case 1 + 2:
        echo "i equals 1";
        break;
    case 1 + (1 > 2 ? 1 : 3):
        echo "i equals 2";
        break;
}

while (++$i) {
    switch ($i) {
        case 5:
            echo "At 5<br />\\n";
            break 2; /* Exit only the switch. */
        case 10:
            echo "At 10; quitting<br />\\n";
            break 4; /* Exit the switch and the while. */
        default:
            break;
    }
}

while ($i++ < 5) {
    echo "Outer<br />\\n";
    while (1) {
        echo "Middle<br />\\n";
        while (1) {
            echo "Inner<br />\\n";
            continue 3;
        }
        echo "This never gets output.<br />\\n";
        continue 2;
    }
    echo "Neither does this.<br />\\n";
}

`;

exports[`declare.php 1`] = `
<?php

declare(strict_types=1);

($a->c());
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

declare(strict_types=1);

$a->c();

`;

exports[`namespace.php 1`] = `
<?php

namespace Foo;

($a->c());
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

namespace Foo;

$a->c();

`;

exports[`new.php 1`] = `
<?php
(new Translator(
    $container,
    new MessageFormatter(),
    'en',
    array(),
    array('foo' => 'bar')
))
?>
<?php
(((new Translator(
    $container,
    new MessageFormatter(),
    'en',
    $someOtherVar,
    array('foo' => 'bar')
))))
?>
<?php
(new Translator(
    $container,
    new MessageFormatter(),
    'en',
    $someOtherVar,
    ['foo' => 'bar']
))
?>
<?php

$var = new Foo();
$var = (new Foo());
$var = (new Foo())->c();
$var = (new class {
    public function log($msg)
    {
        echo $msg;
    }
});
$var = (new foo())->bar();
$var = (new foo())->bar()->foo();
$var = ((new foo())->bar())->foo();
$var = (((new foo())->bar())->foo());
$var = (((new foo())->bar())->foo())[0];
$var = ((((new foo())->bar())->foo())[0])[1];
$var = (((new foo())->bar())->foo())->baz();
$var = (new $foo())->bar;
$var = (new $bar->y)->x;
$var = (new foo)[0];
$var = (new foo)[0]['string'];
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
new Translator(
    $container,
    new MessageFormatter(),
    'en',
    array(),
    array('foo' => 'bar')
); ?>
<?php new Translator(
    $container,
    new MessageFormatter(),
    'en',
    $someOtherVar,
    array('foo' => 'bar')
); ?>
<?php new Translator($container, new MessageFormatter(), 'en', $someOtherVar, [
    'foo' => 'bar'
]); ?>
<?php
$var = new Foo();
$var = new Foo();
$var = (new Foo())->c();
$var = new class {
    public function log($msg)
    {
        echo $msg;
    }
};
$var = (new foo())->bar();
$var = (new foo())->bar()->foo();
$var = (new foo())->bar()->foo();
$var = (new foo())->bar()->foo();
$var = (new foo())->bar()->foo()[0];
$var = ((new foo())->bar()->foo()[0])[1];
$var = (new foo())
    ->bar()
    ->foo()
    ->baz();
$var = (new $foo())->bar;
$var = (new $bar->y())->x;
$var = (new foo())[0];
$var = (new foo())[0]['string'];


`;

exports[`parens.php 1`] = `
<?php
include 'foo.php' . ($test ? 'foo' : 'bar');
include ($test ? 'foo' : 'bar');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
include 'foo.php' . ($test ? 'foo' : 'bar');
include $test ? 'foo' : 'bar';

`;

exports[`pre-post.php 1`] = `
<?php

++$var;
(++$var);

$var++;
($var++);

--$var;
(--$var);

$var--;
($var--);

$var = ++$var;
$var = (++$var);

$var = +(++$var);
$var = -(++$var);
$var = ~(++$var);

$var = +($var++);
$var = -($var++);
$var = ~($var++);

$var = ++$var ** 2;
$var = (++$var) ** 2;

$var = $var++ ** 2;
$var = ($var++) ** 2;

$var = +(+(++$var));
$var = +(+($var++));
$var = ~(-(++$var));
$var = ~(-($var++));

$a->b++;
($a->b++);
++$a->b;
(++$a)->b;

($a->b++)->call();
($a->b++)[1];
($var++)();
$var = call($var->_uuidCounter++);

(--$a->b)->call();
(--$a->b)[1];
(--$var)();
$var = call(--$var->_uuidCounter);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

++$var;
++$var;

$var++;
$var++;

--$var;
--$var;

$var--;
$var--;

$var = ++$var;
$var = ++$var;

$var = +(++$var);
$var = -++$var;
$var = ~++$var;

$var = +($var++);
$var = -$var++;
$var = ~$var++;

$var = (++$var) ** 2;
$var = (++$var) ** 2;

$var = ($var++) ** 2;
$var = ($var++) ** 2;

$var = +(+(++$var));
$var = +(+($var++));
$var = ~-++$var;
$var = ~-$var++;

$a->b++;
$a->b++;
++$a->b;
(++$a)->b;

($a->b++)->call();
($a->b++)[1];
($var++)();
$var = call($var->_uuidCounter++);

(--$a->b)->call();
(--$a->b)[1];
(--$var)();
$var = call(--$var->_uuidCounter);

`;

exports[`program.php 1`] = `
<?php

($a->c());
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$a->c();

`;

exports[`retif.php 1`] = `
<?php

$var ? 1 : 2;
($var ? 1 : 2);

$var = $var ? 1 : 2;
$var = ($var ? 1 : 2);

$var = (int) ($var + 1 === 2 ? '1' : '2');
$var = (int) $var + 1 === 2 ? '1' : '2';
$var = ((int) $var) + 1 === 2 ? '1' : '2';

($var ? $var : $var)();
($var ? $var : $var)->prop;
($var ? $var : $var)->prop();
($var ? $var : $var)[1];
($var ? $var : $var)->d();
($var ? $var : $var)->d()->e();
($var ? $var : $var)->d()->e()->f();
($var
    ? $var->responseBody($var->currentUser)
    : $var->responseBody($var->defaultUser))
->map();
($var
    ? $var.responseBody($var->currentUser)
    : $var.responseBody($var->defaultUser))
->map()->filter();
($var
    ? $var.responseBody($var->currentUser)
    : $var.responseBody($var))
->map();
$var[$var
    ? $var->responseBody($var->currentUser)
    : $var->responseBody($var)]
->map();

$var = $var . $var ? "()" : "";
$var = ($var . $var) ? "()" : "";
$var = $var . ($var ? "()" : "");
$var = +($var ? 1 : 2);
$var = +(+$var ? 1 : 2);
$var = +($var++ ? 1 : 2);
$var = ((true ? 'true' : false) ? (true ? 'true' : false) : (true ? 'true' : false));
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var ? 1 : 2;
$var ? 1 : 2;

$var = $var ? 1 : 2;
$var = $var ? 1 : 2;

$var = (int) ($var + 1 === 2 ? '1' : '2');
$var = (int) ($var + 1 === 2 ? '1' : '2');
$var = ((int) $var) + 1 === 2 ? '1' : '2';

($var ? $var : $var)();
($var ? $var : $var)->prop;
($var ? $var : $var)->prop();
($var ? $var : $var)[1];
($var ? $var : $var)->d();
($var ? $var : $var)->d()->e();
($var ? $var : $var)
    ->d()
    ->e()
    ->f();
($var
    ? $var->responseBody($var->currentUser)
    : $var->responseBody($var->defaultUser)
)->map();
($var
    ? $var . responseBody($var->currentUser)
    : $var . responseBody($var->defaultUser)
)
    ->map()
    ->filter();
($var
    ? $var . responseBody($var->currentUser)
    : $var . responseBody($var)
)->map();
$var[
    $var ? $var->responseBody($var->currentUser) : $var->responseBody($var)
]->map();

$var = $var . $var ? "()" : "";
$var = ($var . $var) ? "()" : "";
$var = $var . ($var ? "()" : "");
$var = +($var ? 1 : 2);
$var = +(+$var ? 1 : 2);
$var = +($var++ ? 1 : 2);
$var = (true ? 'true' : false) ? true ? 'true' : false : true ? 'true' : false;

`;

exports[`return.php 1`] = `
<?php

return;
return 1;
return (1);
return (1 + 2);
return ('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' . 'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString');
return ($var1 + $var2);
return $var ? ($var1 ? 1 : 2) : ($var2 ? 3 : 4);
return ('veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' ? 'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' : 'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

return;
return 1;
return 1;
return 1 + 2;
return (
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString' .
    'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'
);
return $var1 + $var2;
return $var ? $var1 ? 1 : 2 : $var2 ? 3 : 4;
return 'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'
    ? 'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString'
    : 'veryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongString';

`;

exports[`unary.php 1`] = `
<?php

+$var;
+($var);
(+$var);

-$var;
-($var);
(-$var);

~$var;
~($var);
(~$var);

!$var;
!($var);
(!$var);

!!$var;
!(!$var);
(!(!$var));
(!!$var);

$var = (+$var);
$var = +(+$var);

$var = (-$var);
$var = -(-$var);

$var = (~$var);
$var = ~(~$var);

$var = (!$var);
$var = !(!$var);

$a = +$a ** 1;
$a = (+$a) ** 1;
$a = 1 ** (+$a);

$var = call(+$a);
$var = call((+$a));

$var = +($foo->bar);

$var = +$var || +$var;
$var = (+$var) || (+$var);
$var = ((+$var) || (+$var));

$var = -(+($var));

$var = ~(+$var);

$var = ~$var += 1;
$var = ~($var += 1);

(+$a->b)->call();
(+$a->b)[1];
(+$var)();
$var = call(+$var->_uuidCounter);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

+$var;
+$var;
+$var;

-$var;
-$var;
-$var;

~$var;
~$var;
~$var;

!$var;
!$var;
!$var;

!!$var;
!!$var;
!!$var;
!!$var;

$var = +$var;
$var = +(+$var);

$var = -$var;
$var = -(-$var);

$var = ~$var;
$var = ~~$var;

$var = !$var;
$var = !!$var;

$a = (+$a) ** 1;
$a = (+$a) ** 1;
$a = 1 ** +$a;

$var = call(+$a);
$var = call(+$a);

$var = +($foo->bar);

$var = +$var || +$var;
$var = +$var || +$var;
$var = (+$var || +$var);

$var = -+$var;

$var = ~+$var;

$var = ~($var += 1);
$var = ~($var += 1);

(+$a->b)->call();
(+$a->b)[1];
(+$var)();
$var = call(+$var->_uuidCounter);

`;

exports[`unnecessary.php 1`] = `
<?php
$test = 1;
$test = (1);
$test = ((1));
$test = (((1)));

$var = (true);
$var = (false);

$var = ('string');
$var = ("string");
$var = ("string");

$var = (1234); // decimal number
$var = (-123); // a negative number
$var = -(123); // a negative number
$var = (0123); // octal number (equivalent to 83 decimal)
$var = (0x1A); // hexadecimal number (equivalent to 26 decimal)
$var = (0b11111111); // binary number (equivalent to 255 decimal)

$var = (__LINE__);

$var = (<<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD
);
$var = (
<<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD
);

$var = (<<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD
);

$var = (
<<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD
);

$var = ($var);
$var = ($$var);

function foo($a = (1), $b = ('string'), $c = (true), $d = (__LINE__))
{
    echo "Example function.\\n";
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$test = 1;
$test = 1;
$test = 1;
$test = 1;

$var = true;
$var = false;

$var = 'string';
$var = "string";
$var = "string";

$var = 1234; // decimal number
$var = -123; // a negative number
$var = -123; // a negative number
$var = 0123; // octal number (equivalent to 83 decimal)
$var = 0x1a; // hexadecimal number (equivalent to 26 decimal)
$var = 0b11111111; // binary number (equivalent to 255 decimal)

$var = __LINE__;

$var = <<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD;
$var = <<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD;

$var = <<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD;

$var = <<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD;

$var = $var;
$var = $$var;

function foo($a = 1, $b = 'string', $c = true, $d = __LINE__)
{
    echo "Example function.\\n";
}

`;

exports[`yield.php 1`] = `
<?php

function gen_one_to_three() {
    for ($i = 1; $i <= 3; $i++) {
        yield;
        yield $i;
        (yield $i);
        yield from from();
        (yield from from());
        (yield f())->b;
        !(yield $var);
        yield (yield $var);
    }

    $var = yield;
    $var = yield $var;
    $var += yield $var;
    $var = (yield $var);
    $var += (yield $var);
    $var = yield $key => $var;
    $var = (yield $key => $var);
    $var = !yield $var;
    $var = !(yield $var);
    $var = yield (yield $var);
    $var = yield 1 ? 1 : 1;
    $var = (yield 1) ? 1 : 1;
    $var = yield 1 ? yield 1 : yield 1;
    $var = (yield 1) ? (yield 1) : (yield 1);
    $var = yield $var->b;
    $var = (yield $var)->b;
    $var = yield $var->b();
    $var = (yield $var)->b();
    $var = yield $var[1];
    $var = (yield $var)[1];

    call(yield $var);

    return yield from nine_ten();

    foreach($SubTrav as $SubItem) yield $SubItem;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

function gen_one_to_three()
{
    for ($i = 1; $i <= 3; $i++) {
        yield;
        yield $i;
        yield $i;
        yield from from();
        yield from from();
        (yield f())->b;
        !(yield $var);
        yield (yield $var);
    }

    $var = yield;
    $var = (yield $var);
    $var += (yield $var);
    $var = (yield $var);
    $var += (yield $var);
    $var = (yield $key => $var);
    $var = (yield $key => $var);
    $var = !(yield $var);
    $var = !(yield $var);
    $var = (yield (yield $var));
    $var = (yield 1 ? 1 : 1);
    $var = (yield 1) ? 1 : 1;
    $var = (yield 1 ? yield 1 : yield 1);
    $var = (yield 1) ? yield 1 : yield 1;
    $var = (yield $var->b);
    $var = (yield $var)->b;
    $var = (yield $var->b());
    $var = (yield $var)->b();
    $var = (yield $var[1]);
    $var = (yield $var)[1];

    call(yield $var);

    return yield from nine_ten();

    foreach ($SubTrav as $SubItem) {
        yield $SubItem;
    }
}

`;
