// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bin.php 1`] = `
<?php

$var = 1;
($var = 1);
$var = $var = 1;
$var = ($var = 1);
($var = $var = 1);
($var = ($var = 1));
$var = $var = $var = $var;
$var = $var = ($var = $var);
$var = ($var = $var = $var);
$var = ($var = ($var = $var));
($var = ($var = ($var = $var)));

$var = $var++;
$var = ($var++);
$var = ++$var;
$var = (++$var);

$var = $var--;
$var = ($var--);
$var = --$var;
$var = (--$var);

$var = ~$var;
$var = (~$var);

$var = !$var;
$var = (!$var);

$var = $var += 10;
$var = ($var += 10);

$var = 10 + 20 + 30;
$var = (10 + 20) + 30;
$var = 10 + (20 + 30);

$var = '10' . '20' . '30';
$var = ('10' . '20') . '30';
$var = '10' . ('20' . '30');

$var = 10 + 20 % 30;
$var = (10 + 20) % 30;
$var = 10 + (20 % 30);

$var = 10 ** 20 ** 30;
$var = (10 ** 20) ** 30;
$var = 10 ** (20 ** 30);

$var = (10 == 20) == 30;
$var = 10 == (20 == 30);

$var = (10 === 20) === 30;
$var = 10 === (20 === 30);

$var = 10 * 20 % 30;
$var = (10 * 20) % 30;
$var = 10 * (20 % 30);

$var = 10 * 20 / 30;
$var = (10 * 20) / 30;
$var = 10 * (20 / 30);

$var = 10 / 20 * 30;
$var = (10 / 20) * 30;
$var = 10 / (20 * 30);

$var = 10 << 20 << 30;
$var = (10 << 20) << 30;
$var = 10 << (20 << 30);

$var = 10 >> 20 >> 30;
$var = (10 >> 20) >> 30;
$var = 10 >> (20 >> 30);

$var = 10 ^ 20 ^ 30;
$var = (10 ^ 20) ^ 30;
$var = 10 ^ (20 ^ 30);

$var = 10 | 20 | 30;
$var = (10 | 20) | 30;
$var = 10 | (20 | 30);

$var = false || true;
$var = (false || true);
$var = false or true;
$var = (false or true);
$var = true && false;
$var = (true && false);
$var = true and false;
$var = (true and false);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php

$var = 1;
($var = 1);
$var = $var = 1;
$var = ($var = 1);
($var = $var = 1);
($var = ($var = 1));
$var = $var = $var = $var;
$var = $var = ($var = $var);
$var = ($var = $var = $var);
$var = ($var = ($var = $var));
($var = ($var = ($var = $var)));

$var = $var++;
$var = ($var++);
$var = ++$var;
$var = (++$var);

$var = $var--;
$var = ($var--);
$var = --$var;
$var = (--$var);

$var = ~$var;
$var = (~$var);

$var = !$var;
$var = (!$var);

$var = $var += 10;
$var = ($var += 10);

$var = 10 + 20 + 30;
$var = 10 + 20 + 30;
$var = 10 + (20 + 30);

$var = '10' . '20' . '30';
$var = '10' . '20' . '30';
$var = '10' . ('20' . '30');

$var = 10 + 20 % 30;
$var = (10 + 20) % 30;
$var = 10 + (20 % 30);

$var = 10 ** 20 ** 30;
$var = (10 ** 20) ** 30;
$var = 10 ** (20 ** 30);

$var = (10 == 20) == 30;
$var = 10 == (20 == 30);

$var = (10 === 20) === 30;
$var = 10 === (20 === 30);

$var = 10 * 20 % 30;
$var = (10 * 20) % 30;
$var = 10 * (20 % 30);

$var = 10 * 20 / 30;
$var = (10 * 20) / 30;
$var = 10 * (20 / 30);

$var = 10 / 20 * 30;
$var = (10 / 20) * 30;
$var = 10 / (20 * 30);

$var = 10 << 20 << 30;
$var = (10 << 20) << 30;
$var = 10 << (20 << 30);

$var = 10 >> 20 >> 30;
$var = (10 >> 20) >> 30;
$var = 10 >> (20 >> 30);

$var = 10 ^ 20 ^ 30;
$var = 10 ^ 20 ^ 30;
$var = 10 ^ (20 ^ 30);

$var = 10 | 20 | 30;
$var = 10 | 20 | 30;
$var = 10 | (20 | 30);

$var = false || true;
$var = (false || true);
$var = false or true;
$var = (false or true);
$var = true && false;
$var = (true && false);
$var = true and false;
$var = (true and false);

`;

exports[`new.php 1`] = `
<?php
(new Translator(
    $container,
    new MessageFormatter(),
    'en',
    array(),
    array('foo' => 'bar')
))
?>
<?php
(((new Translator(
    $container,
    new MessageFormatter(),
    'en',
    $someOtherVar,
    array('foo' => 'bar')
))))
?>
<?php
(new Translator(
    $container,
    new MessageFormatter(),
    'en',
    $someOtherVar,
    ['foo' => 'bar']
))
?>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
(new Translator(
    $container,
    new MessageFormatter(),
    'en',
    array(),
    array('foo' => 'bar')
)); ?>
<?php (new Translator(
    $container,
    new MessageFormatter(),
    'en',
    $someOtherVar,
    array('foo' => 'bar')
)); ?>
<?php (new Translator($container, new MessageFormatter(), 'en', $someOtherVar, [
    'foo' => 'bar'
]));
?>

`;

exports[`parens.php 1`] = `
<?php
include 'foo.php' . ($test ? 'foo' : 'bar');
include ($test ? 'foo' : 'bar');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
include 'foo.php' . ($test ? 'foo' : 'bar');
include $test ? 'foo' : 'bar';

`;

exports[`unnecessary.php 1`] = `
<?php
$test = 1;
$test = (1);
$test = ((1));
$test = (((1)));

$var = (true);
$var = (false);

$var = ('string');
$var = ("string");
$var = ("string");

$var = (1234); // decimal number
$var = (-123); // a negative number
$var = -(123); // a negative number
$var = (0123); // octal number (equivalent to 83 decimal)
$var = (0x1A); // hexadecimal number (equivalent to 26 decimal)
$var = (0b11111111); // binary number (equivalent to 255 decimal)

$var = (__LINE__);

$var = (<<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD
);
$var = (
<<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD
);

$var = (<<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD
);

$var = (
<<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD
);

$var = ($var);
$var = ($$var);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
<?php
$test = 1;
$test = 1;
$test = 1;
$test = 1;

$var = true;
$var = false;

$var = 'string';
$var = "string";
$var = "string";

$var = 1234; // decimal number
$var = -123; // a negative number
$var = -123; // a negative number
$var = 0123; // octal number (equivalent to 83 decimal)
$var = 0x1a; // hexadecimal number (equivalent to 26 decimal)
$var = 0b11111111; // binary number (equivalent to 255 decimal)

$var = __LINE__;

$var = <<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD;
$var = <<<EOD
Example of string
spanning multiple lines
using heredoc syntax.
EOD;

$var = <<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD;

$var = <<<'EOD'
Example of string
spanning multiple lines
using nowdoc syntax.
EOD;

$var = $var;
$var = $$var;

`;
