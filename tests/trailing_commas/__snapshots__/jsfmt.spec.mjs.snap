// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`array.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

$foo = ['foo', 'bar'];
$foo = ['foo', 'bar',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',];
$foo = array('foo', 'bar');
$foo = array('foo', 'bar',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',);
$packages = array_merge(
    idx($composer, 'require', []),
    idx($composer, 'require-dev', [])
);

// nowdoc
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// heredoc
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with nowdoc
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with heredoc
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Nested with nowdoc
$expected = array(
    'test' => <<<'EOT'
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<'EOT'
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<'EOT'
foo
# bar
baz
EOT
        )
    )
);

// Nested with heredoc
$expected = array(
    'test' => <<<EOT
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<EOT
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<EOT
foo
# bar
baz
EOT
        )
    )
);

=====================================output=====================================
<?php

$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$packages = array_merge(
    idx($composer, "require", []),
    idx($composer, "require-dev", [])
);

// nowdoc
$expected = [
    <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar",
];

// heredoc
$expected = [
    <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    <<<EOT
foo
# bar
baz

EOT
    ,
    "bar",
];

// Associative array with nowdoc
$expected = [
    "key" => <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    "key" => <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    "key" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar",
];

// Associative array with heredoc
$expected = [
    "key" => <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    "key" => <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    "key" => <<<EOT
foo
# bar
baz

EOT
    ,
    "bar",
];

// Nested with nowdoc
$expected = [
    "test" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "collection" => [
        [
            "one" => <<<'EOT'
foo
# bar
baz

EOT
        ,
        ],
        [
            "two" => <<<'EOT'
foo
# bar
baz
EOT
        ,
        ],
    ],
];

// Nested with heredoc
$expected = [
    "test" => <<<EOT
foo
# bar
baz

EOT
    ,
    "collection" => [
        [
            "one" => <<<EOT
foo
# bar
baz

EOT
        ,
        ],
        [
            "two" => <<<EOT
foo
# bar
baz
EOT
        ,
        ],
    ],
];

================================================================================
`;

exports[`array.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.0"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

$foo = ['foo', 'bar'];
$foo = ['foo', 'bar',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',];
$foo = array('foo', 'bar');
$foo = array('foo', 'bar',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',);
$packages = array_merge(
    idx($composer, 'require', []),
    idx($composer, 'require-dev', [])
);

// nowdoc
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// heredoc
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with nowdoc
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with heredoc
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Nested with nowdoc
$expected = array(
    'test' => <<<'EOT'
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<'EOT'
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<'EOT'
foo
# bar
baz
EOT
        )
    )
);

// Nested with heredoc
$expected = array(
    'test' => <<<EOT
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<EOT
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<EOT
foo
# bar
baz
EOT
        )
    )
);

=====================================output=====================================
<?php

$foo = array("foo", "bar");
$foo = array("foo", "bar");
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
);
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
);
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
);
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
);
$foo = array("foo", "bar");
$foo = array("foo", "bar");
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
);
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
);
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
);
$foo = array(
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
);
$packages = array_merge(
    idx($composer, "require", array()),
    idx($composer, "require-dev", array())
);

// nowdoc
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    "foo",
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar",
);

// heredoc
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    "foo",
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
    ,
    "bar",
);

// Associative array with nowdoc
$expected = array(
    "key" => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    "foo",
    "key" => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    "key" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar",
);

// Associative array with heredoc
$expected = array(
    "key" => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    "foo",
    "key" => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    "key" => <<<EOT
foo
# bar
baz

EOT
    ,
    "bar",
);

// Nested with nowdoc
$expected = array(
    "test" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "collection" => array(
        array(
            "one" => <<<'EOT'
foo
# bar
baz

EOT
        ,
        ),
        array(
            "two" => <<<'EOT'
foo
# bar
baz
EOT
        ,
        ),
    ),
);

// Nested with heredoc
$expected = array(
    "test" => <<<EOT
foo
# bar
baz

EOT
    ,
    "collection" => array(
        array(
            "one" => <<<EOT
foo
# bar
baz

EOT
        ,
        ),
        array(
            "two" => <<<EOT
foo
# bar
baz
EOT
        ,
        ),
    ),
);

================================================================================
`;

exports[`array.php 3`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.2"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

$foo = ['foo', 'bar'];
$foo = ['foo', 'bar',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',];
$foo = array('foo', 'bar');
$foo = array('foo', 'bar',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',);
$packages = array_merge(
    idx($composer, 'require', []),
    idx($composer, 'require-dev', [])
);

// nowdoc
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// heredoc
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with nowdoc
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with heredoc
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Nested with nowdoc
$expected = array(
    'test' => <<<'EOT'
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<'EOT'
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<'EOT'
foo
# bar
baz
EOT
        )
    )
);

// Nested with heredoc
$expected = array(
    'test' => <<<EOT
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<EOT
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<EOT
foo
# bar
baz
EOT
        )
    )
);

=====================================output=====================================
<?php

$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$packages = array_merge(
    idx($composer, "require", []),
    idx($composer, "require-dev", [])
);

// nowdoc
$expected = [
    <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar",
];

// heredoc
$expected = [
    <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    <<<EOT
foo
# bar
baz

EOT
    ,
    "bar",
];

// Associative array with nowdoc
$expected = [
    "key" => <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    "key" => <<<'EOT'
foo
# bar
baz

EOT
,
];
$expected = [
    "key" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar",
];

// Associative array with heredoc
$expected = [
    "key" => <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    "foo",
    "key" => <<<EOT
foo
# bar
baz

EOT
,
];
$expected = [
    "key" => <<<EOT
foo
# bar
baz

EOT
    ,
    "bar",
];

// Nested with nowdoc
$expected = [
    "test" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "collection" => [
        [
            "one" => <<<'EOT'
foo
# bar
baz

EOT
        ,
        ],
        [
            "two" => <<<'EOT'
foo
# bar
baz
EOT
        ,
        ],
    ],
];

// Nested with heredoc
$expected = [
    "test" => <<<EOT
foo
# bar
baz

EOT
    ,
    "collection" => [
        [
            "one" => <<<EOT
foo
# bar
baz

EOT
        ,
        ],
        [
            "two" => <<<EOT
foo
# bar
baz
EOT
        ,
        ],
    ],
];

================================================================================
`;

exports[`array.php 4`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.3"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

$foo = ['foo', 'bar'];
$foo = ['foo', 'bar',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',];
$foo = array('foo', 'bar');
$foo = array('foo', 'bar',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',);
$packages = array_merge(
    idx($composer, 'require', []),
    idx($composer, 'require-dev', [])
);

// nowdoc
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// heredoc
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with nowdoc
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with heredoc
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Nested with nowdoc
$expected = array(
    'test' => <<<'EOT'
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<'EOT'
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<'EOT'
foo
# bar
baz
EOT
        )
    )
);

// Nested with heredoc
$expected = array(
    'test' => <<<EOT
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<EOT
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<EOT
foo
# bar
baz
EOT
        )
    )
);

=====================================output=====================================
<?php

$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar",
];
$packages = array_merge(
    idx($composer, "require", []),
    idx($composer, "require-dev", []),
);

// nowdoc
$expected = [
    <<<'EOT'
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    "foo",
    <<<'EOT'
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    <<<'EOT'
    foo
    # bar
    baz

    EOT
    ,
    "bar",
];

// heredoc
$expected = [
    <<<EOT
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    "foo",
    <<<EOT
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    <<<EOT
    foo
    # bar
    baz

    EOT
    ,
    "bar",
];

// Associative array with nowdoc
$expected = [
    "key" => <<<'EOT'
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    "foo",
    "key" => <<<'EOT'
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    "key" => <<<'EOT'
    foo
    # bar
    baz

    EOT
    ,
    "bar",
];

// Associative array with heredoc
$expected = [
    "key" => <<<EOT
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    "foo",
    "key" => <<<EOT
    foo
    # bar
    baz

    EOT
,
];
$expected = [
    "key" => <<<EOT
    foo
    # bar
    baz

    EOT
    ,
    "bar",
];

// Nested with nowdoc
$expected = [
    "test" => <<<'EOT'
    foo
    # bar
    baz

    EOT
    ,
    "collection" => [
        [
            "one" => <<<'EOT'
            foo
            # bar
            baz

            EOT
        ,
        ],
        [
            "two" => <<<'EOT'
            foo
            # bar
            baz
            EOT
        ,
        ],
    ],
];

// Nested with heredoc
$expected = [
    "test" => <<<EOT
    foo
    # bar
    baz

    EOT
    ,
    "collection" => [
        [
            "one" => <<<EOT
            foo
            # bar
            baz

            EOT
        ,
        ],
        [
            "two" => <<<EOT
            foo
            # bar
            baz
            EOT
        ,
        ],
    ],
];

================================================================================
`;

exports[`array.php 5`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
trailingComma: "all"
trailingCommaPHP: false
                                                                                | printWidth
=====================================input======================================
<?php

$foo = ['foo', 'bar'];
$foo = ['foo', 'bar',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar'];
$foo = ['very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',];
$foo = array('foo', 'bar');
$foo = array('foo', 'bar',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1', 'very-very-very-very-very-very-very-very-very-long-item-2',);
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar');
$foo = array('very-very-very-very-very-very-very-very-very-long-item-1' => 'foo', 'very-very-very-very-very-very-very-very-very-long-item-2' => 'bar',);
$packages = array_merge(
    idx($composer, 'require', []),
    idx($composer, 'require-dev', [])
);

// nowdoc
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// heredoc
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with nowdoc
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<'EOT'
foo
# bar
baz

EOT
,
    'bar',
);

// Associative array with heredoc
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'foo',
    'key' => <<<EOT
foo
# bar
baz

EOT
,
);
$expected = array(
    'key' => <<<EOT
foo
# bar
baz

EOT
,
    'bar',
);

// Nested with nowdoc
$expected = array(
    'test' => <<<'EOT'
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<'EOT'
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<'EOT'
foo
# bar
baz
EOT
        )
    )
);

// Nested with heredoc
$expected = array(
    'test' => <<<EOT
foo
# bar
baz

EOT
,
    'collection' => array(
        array(
            'one' => <<<EOT
foo
# bar
baz

EOT
        ),
        array(
            'two' => <<<EOT
foo
# bar
baz
EOT
        )
    )
);

=====================================output=====================================
<?php

$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2"
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2"
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar"
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar"
];
$foo = ["foo", "bar"];
$foo = ["foo", "bar"];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2"
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1",
    "very-very-very-very-very-very-very-very-very-long-item-2"
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar"
];
$foo = [
    "very-very-very-very-very-very-very-very-very-long-item-1" => "foo",
    "very-very-very-very-very-very-very-very-very-long-item-2" => "bar"
];
$packages = array_merge(
    idx($composer, "require", []),
    idx($composer, "require-dev", [])
);

// nowdoc
$expected = [
    <<<'EOT'
foo
# bar
baz

EOT
];
$expected = [
    "foo",
    <<<'EOT'
foo
# bar
baz

EOT
];
$expected = [
    <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar"
];

// heredoc
$expected = [
    <<<EOT
foo
# bar
baz

EOT
];
$expected = [
    "foo",
    <<<EOT
foo
# bar
baz

EOT
];
$expected = [
    <<<EOT
foo
# bar
baz

EOT
    ,
    "bar"
];

// Associative array with nowdoc
$expected = [
    "key" => <<<'EOT'
foo
# bar
baz

EOT
];
$expected = [
    "foo",
    "key" => <<<'EOT'
foo
# bar
baz

EOT
];
$expected = [
    "key" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "bar"
];

// Associative array with heredoc
$expected = [
    "key" => <<<EOT
foo
# bar
baz

EOT
];
$expected = [
    "foo",
    "key" => <<<EOT
foo
# bar
baz

EOT
];
$expected = [
    "key" => <<<EOT
foo
# bar
baz

EOT
    ,
    "bar"
];

// Nested with nowdoc
$expected = [
    "test" => <<<'EOT'
foo
# bar
baz

EOT
    ,
    "collection" => [
        [
            "one" => <<<'EOT'
foo
# bar
baz

EOT
        ],
        [
            "two" => <<<'EOT'
foo
# bar
baz
EOT
        ]
    ]
];

// Nested with heredoc
$expected = [
    "test" => <<<EOT
foo
# bar
baz

EOT
    ,
    "collection" => [
        [
            "one" => <<<EOT
foo
# bar
baz

EOT
        ],
        [
            "two" => <<<EOT
foo
# bar
baz
EOT
        ]
    ]
];

================================================================================
`;

exports[`call.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

foo(
    'constructor',
    'bar',
);

foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new Foo(
    'constructor',
    'bar',
);

$foo = new Foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new class('constructor', 'bar',){};

$foo = new class(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
){};

$foo->bar(
    'method',
    'bar',
);

$foo->bar(
    'method',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo(
    'invoke',
    'bar',
);

$foo(
    'invoke',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$var = strlen($var,);

$var = strlen($var,  'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
    )
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
        'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
    )
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    ['foo', 'bar'],
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ['foo', 'bar',],
);

$en = 'A trailing %s makes %s a happy developer.';
$text = sprintf(
    $en,
    'comma',
    'Jane',
);

$text = sprintf(
    $en,
    'comma',
    'Jane',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

call(['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],);

call(<<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

call(<<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; }, function ($x) { return $x->selected; },);
=====================================output=====================================
<?php

foo("constructor", "bar");

foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new Foo("constructor", "bar");

$foo = new Foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new class ("constructor", "bar") {};

$foo = new class (
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
) {};

$foo->bar("method", "bar");

$foo->bar(
    "method",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo("invoke", "bar");

$foo(
    "invoke",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$var = strlen($var);

$var = strlen(
    $var,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

var_dump($whatIsInThere, $probablyABugInThisOne, $oneMoreToCheck);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

echo $twig->render("index.html", compact("title", "body", "comments"));

echo $twig->render(
    "index.html",
    compact(
        "title",
        "body",
        "comments",
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
    )
);

$newArray = array_merge($arrayOne, $arrayTwo, ["foo", "bar"]);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ["foo", "bar"]
);

$en = "A trailing %s makes %s a happy developer.";
$text = sprintf($en, "comma", "Jane");

$text = sprintf(
    $en,
    "comma",
    "Jane",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

call(
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ],
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ]
);

call(
    <<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

call(
    <<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) {
        return $x->selected;
    });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(
        function ($x) {
            return $x->selected;
        },
        function ($x) {
            return $x->selected;
        }
    );

================================================================================
`;

exports[`call.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.0"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

foo(
    'constructor',
    'bar',
);

foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new Foo(
    'constructor',
    'bar',
);

$foo = new Foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new class('constructor', 'bar',){};

$foo = new class(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
){};

$foo->bar(
    'method',
    'bar',
);

$foo->bar(
    'method',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo(
    'invoke',
    'bar',
);

$foo(
    'invoke',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$var = strlen($var,);

$var = strlen($var,  'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
    )
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
        'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
    )
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    ['foo', 'bar'],
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ['foo', 'bar',],
);

$en = 'A trailing %s makes %s a happy developer.';
$text = sprintf(
    $en,
    'comma',
    'Jane',
);

$text = sprintf(
    $en,
    'comma',
    'Jane',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

call(['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],);

call(<<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

call(<<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; }, function ($x) { return $x->selected; },);
=====================================output=====================================
<?php

foo("constructor", "bar");

foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new Foo("constructor", "bar");

$foo = new Foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new class ("constructor", "bar") {};

$foo = new class (
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
) {};

$foo->bar("method", "bar");

$foo->bar(
    "method",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo("invoke", "bar");

$foo(
    "invoke",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$var = strlen($var);

$var = strlen(
    $var,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

var_dump($whatIsInThere, $probablyABugInThisOne, $oneMoreToCheck);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

echo $twig->render("index.html", compact("title", "body", "comments"));

echo $twig->render(
    "index.html",
    compact(
        "title",
        "body",
        "comments",
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
    )
);

$newArray = array_merge($arrayOne, $arrayTwo, array("foo", "bar"));

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    array("foo", "bar")
);

$en = "A trailing %s makes %s a happy developer.";
$text = sprintf($en, "comma", "Jane");

$text = sprintf(
    $en,
    "comma",
    "Jane",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

call(
    array(
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ),
    array(
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    )
);

call(
    <<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

call(
    <<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) {
        return $x->selected;
    });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(
        function ($x) {
            return $x->selected;
        },
        function ($x) {
            return $x->selected;
        }
    );

================================================================================
`;

exports[`call.php 3`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.2"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

foo(
    'constructor',
    'bar',
);

foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new Foo(
    'constructor',
    'bar',
);

$foo = new Foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new class('constructor', 'bar',){};

$foo = new class(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
){};

$foo->bar(
    'method',
    'bar',
);

$foo->bar(
    'method',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo(
    'invoke',
    'bar',
);

$foo(
    'invoke',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$var = strlen($var,);

$var = strlen($var,  'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
    )
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
        'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
    )
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    ['foo', 'bar'],
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ['foo', 'bar',],
);

$en = 'A trailing %s makes %s a happy developer.';
$text = sprintf(
    $en,
    'comma',
    'Jane',
);

$text = sprintf(
    $en,
    'comma',
    'Jane',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

call(['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],);

call(<<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

call(<<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; }, function ($x) { return $x->selected; },);
=====================================output=====================================
<?php

foo("constructor", "bar");

foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new Foo("constructor", "bar");

$foo = new Foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new class ("constructor", "bar") {};

$foo = new class (
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
) {};

$foo->bar("method", "bar");

$foo->bar(
    "method",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo("invoke", "bar");

$foo(
    "invoke",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$var = strlen($var);

$var = strlen(
    $var,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

var_dump($whatIsInThere, $probablyABugInThisOne, $oneMoreToCheck);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

echo $twig->render("index.html", compact("title", "body", "comments"));

echo $twig->render(
    "index.html",
    compact(
        "title",
        "body",
        "comments",
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
    )
);

$newArray = array_merge($arrayOne, $arrayTwo, ["foo", "bar"]);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ["foo", "bar"]
);

$en = "A trailing %s makes %s a happy developer.";
$text = sprintf($en, "comma", "Jane");

$text = sprintf(
    $en,
    "comma",
    "Jane",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

call(
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ],
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ]
);

call(
    <<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

call(
    <<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) {
        return $x->selected;
    });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(
        function ($x) {
            return $x->selected;
        },
        function ($x) {
            return $x->selected;
        }
    );

================================================================================
`;

exports[`call.php 4`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.3"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

foo(
    'constructor',
    'bar',
);

foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new Foo(
    'constructor',
    'bar',
);

$foo = new Foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new class('constructor', 'bar',){};

$foo = new class(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
){};

$foo->bar(
    'method',
    'bar',
);

$foo->bar(
    'method',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo(
    'invoke',
    'bar',
);

$foo(
    'invoke',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$var = strlen($var,);

$var = strlen($var,  'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
    )
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
        'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
    )
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    ['foo', 'bar'],
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ['foo', 'bar',],
);

$en = 'A trailing %s makes %s a happy developer.';
$text = sprintf(
    $en,
    'comma',
    'Jane',
);

$text = sprintf(
    $en,
    'comma',
    'Jane',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

call(['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],);

call(<<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

call(<<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; }, function ($x) { return $x->selected; },);
=====================================output=====================================
<?php

foo("constructor", "bar");

foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
);

$foo = new Foo("constructor", "bar");

$foo = new Foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
);

$foo = new class ("constructor", "bar") {};

$foo = new class (
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
) {};

$foo->bar("method", "bar");

$foo->bar(
    "method",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
);

$foo("invoke", "bar");

$foo(
    "invoke",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
);

$var = strlen($var);

$var = strlen(
    $var,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
);

var_dump($whatIsInThere, $probablyABugInThisOne, $oneMoreToCheck);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
);

echo $twig->render("index.html", compact("title", "body", "comments"));

echo $twig->render(
    "index.html",
    compact(
        "title",
        "body",
        "comments",
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ),
);

$newArray = array_merge($arrayOne, $arrayTwo, ["foo", "bar"]);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ["foo", "bar"],
);

$en = "A trailing %s makes %s a happy developer.";
$text = sprintf($en, "comma", "Jane");

$text = sprintf(
    $en,
    "comma",
    "Jane",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
);

call(
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ],
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string",
    ],
);

call(
    <<<'EOT'
    My name is "$name". I am printing some $foo->foo.
    Now, I am printing some {$foo->bar[1]}.
    This should not print a capital 'A': \\x41
    EOT
    ,
);

call(
    <<<EOT
    My name is "$name". I am printing some $foo->foo.
    Now, I am printing some {$foo->bar[1]}.
    This should not print a capital 'A': \\x41
    EOT
    ,
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) {
        return $x->selected;
    });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(
        function ($x) {
            return $x->selected;
        },
        function ($x) {
            return $x->selected;
        },
    );

================================================================================
`;

exports[`call.php 5`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
trailingComma: "all"
trailingCommaPHP: false
                                                                                | printWidth
=====================================input======================================
<?php

foo(
    'constructor',
    'bar',
);

foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new Foo(
    'constructor',
    'bar',
);

$foo = new Foo(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo = new class('constructor', 'bar',){};

$foo = new class(
    'constructor',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
){};

$foo->bar(
    'method',
    'bar',
);

$foo->bar(
    'method',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$foo(
    'invoke',
    'bar',
);

$foo(
    'invoke',
    'bar',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

$var = strlen($var,);

$var = strlen($var,  'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
    )
);

echo $twig->render(
    'index.html',
    compact(
        'title',
        'body',
        'comments',
        'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
    )
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    ['foo', 'bar'],
);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ['foo', 'bar',],
);

$en = 'A trailing %s makes %s a happy developer.';
$text = sprintf(
    $en,
    'comma',
    'Jane',
);

$text = sprintf(
    $en,
    'comma',
    'Jane',
    'very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',
);

call(['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],['very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string',],);

call(<<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

call(<<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
    ,
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) { return $x->selected; }, function ($x) { return $x->selected; },);
=====================================output=====================================
<?php

foo("constructor", "bar");

foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new Foo("constructor", "bar");

$foo = new Foo(
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo = new class ("constructor", "bar") {};

$foo = new class (
    "constructor",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
) {};

$foo->bar("method", "bar");

$foo->bar(
    "method",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$foo("invoke", "bar");

$foo(
    "invoke",
    "bar",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

$var = strlen($var);

$var = strlen(
    $var,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

var_dump($whatIsInThere, $probablyABugInThisOne, $oneMoreToCheck);

var_dump(
    $whatIsInThere,
    $probablyABugInThisOne,
    $oneMoreToCheck,
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

echo $twig->render("index.html", compact("title", "body", "comments"));

echo $twig->render(
    "index.html",
    compact(
        "title",
        "body",
        "comments",
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
    )
);

$newArray = array_merge($arrayOne, $arrayTwo, ["foo", "bar"]);

$newArray = array_merge(
    $arrayOne,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    $arrayTwo,
    ["foo", "bar"]
);

$en = "A trailing %s makes %s a happy developer.";
$text = sprintf($en, "comma", "Jane");

$text = sprintf(
    $en,
    "comma",
    "Jane",
    "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
);

call(
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
    ],
    [
        "very-very-very-very-very-very-very-very-very-very-very-very-veru-long-string"
    ]
);

call(
    <<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

call(
    <<<EOT
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
This should not print a capital 'A': \\x41
EOT
);

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(function ($x) {
        return $x->selected;
    });

$sel = $this->connections

    ->concat($this->activities->concat($this->operators))
    ->filter(
        function ($x) {
            return $x->selected;
        },
        function ($x) {
            return $x->selected;
        }
    );

================================================================================
`;

exports[`isset.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

var_dump(isset($foo, $bar,));
var_dump(isset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,));
=====================================output=====================================
<?php

var_dump(isset($foo, $bar));
var_dump(
    isset(
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
    )
);

================================================================================
`;

exports[`isset.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.0"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

var_dump(isset($foo, $bar,));
var_dump(isset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,));
=====================================output=====================================
<?php

var_dump(isset($foo, $bar));
var_dump(
    isset(
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
    )
);

================================================================================
`;

exports[`isset.php 3`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.2"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

var_dump(isset($foo, $bar,));
var_dump(isset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,));
=====================================output=====================================
<?php

var_dump(isset($foo, $bar));
var_dump(
    isset(
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
    )
);

================================================================================
`;

exports[`isset.php 4`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.3"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

var_dump(isset($foo, $bar,));
var_dump(isset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,));
=====================================output=====================================
<?php

var_dump(isset($foo, $bar));
var_dump(
    isset(
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
    ),
);

================================================================================
`;

exports[`isset.php 5`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
trailingComma: "all"
trailingCommaPHP: false
                                                                                | printWidth
=====================================input======================================
<?php

var_dump(isset($foo, $bar,));
var_dump(isset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,));
=====================================output=====================================
<?php

var_dump(isset($foo, $bar));
var_dump(
    isset(
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
        $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
    )
);

================================================================================
`;

exports[`list.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(,$first, $second, $three, $fourth,) = $arr;
list(,,$first, $second, $three, $fourth,,) = $arr;
list(,,$first,, $second,, $three,, $fourth,,) = $arr;
list(,,,$first, $second, $three, $fourth,,,) = $arr;
list(,,,$first,,, $second,,, $three,,, $fourth,,,) = $arr;

list(0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong) = $arr;
list(,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong,, 1 => $secondVeryVeryVeryVeryLong,, 2 => $threeVeryVeryVeryVeryLong,, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong,,, 1 => $secondVeryVeryVeryVeryLong,,, 2 => $threeVeryVeryVeryVeryLong,,, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;

=====================================output=====================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(, $first, $second, $three, $fourth) = $arr;
list(, , $first, $second, $three, $fourth, ,) = $arr;
list(, , $first, , $second, , $three, , $fourth, ,) = $arr;
list(, , , $first, $second, $three, $fourth, , ,) = $arr;
list(, , , $first, , , $second, , , $three, , , $fourth, , ,) = $arr;

list(
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
) = $arr;
list(
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
) = $arr;
list(
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
) = $arr;
list(
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
) = $arr;
list(
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
) = $arr;
list(
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
) = $arr;

================================================================================
`;

exports[`list.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.0"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(,$first, $second, $three, $fourth,) = $arr;
list(,,$first, $second, $three, $fourth,,) = $arr;
list(,,$first,, $second,, $three,, $fourth,,) = $arr;
list(,,,$first, $second, $three, $fourth,,,) = $arr;
list(,,,$first,,, $second,,, $three,,, $fourth,,,) = $arr;

list(0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong) = $arr;
list(,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong,, 1 => $secondVeryVeryVeryVeryLong,, 2 => $threeVeryVeryVeryVeryLong,, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong,,, 1 => $secondVeryVeryVeryVeryLong,,, 2 => $threeVeryVeryVeryVeryLong,,, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;

=====================================output=====================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(, $first, $second, $three, $fourth) = $arr;
list(, , $first, $second, $three, $fourth, ,) = $arr;
list(, , $first, , $second, , $three, , $fourth, ,) = $arr;
list(, , , $first, $second, $three, $fourth, , ,) = $arr;
list(, , , $first, , , $second, , , $three, , , $fourth, , ,) = $arr;

list(
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
) = $arr;
list(
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
) = $arr;
list(
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
) = $arr;
list(
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
) = $arr;
list(
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
) = $arr;
list(
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
) = $arr;

================================================================================
`;

exports[`list.php 3`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.2"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(,$first, $second, $three, $fourth,) = $arr;
list(,,$first, $second, $three, $fourth,,) = $arr;
list(,,$first,, $second,, $three,, $fourth,,) = $arr;
list(,,,$first, $second, $three, $fourth,,,) = $arr;
list(,,,$first,,, $second,,, $three,,, $fourth,,,) = $arr;

list(0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong) = $arr;
list(,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong,, 1 => $secondVeryVeryVeryVeryLong,, 2 => $threeVeryVeryVeryVeryLong,, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong,,, 1 => $secondVeryVeryVeryVeryLong,,, 2 => $threeVeryVeryVeryVeryLong,,, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;

=====================================output=====================================
<?php

[$first, $second, $three, $fourth] = $arr;
[, $first, $second, $three, $fourth] = $arr;
[, , $first, $second, $three, $fourth, ,] = $arr;
[, , $first, , $second, , $three, , $fourth, ,] = $arr;
[, , , $first, $second, $three, $fourth, , ,] = $arr;
[, , , $first, , , $second, , , $three, , , $fourth, , ,] = $arr;

[
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
] = $arr;
[
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
] = $arr;
[
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
] = $arr;
[
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
] = $arr;
[
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
] = $arr;
[
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
] = $arr;

================================================================================
`;

exports[`list.php 4`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.3"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(,$first, $second, $three, $fourth,) = $arr;
list(,,$first, $second, $three, $fourth,,) = $arr;
list(,,$first,, $second,, $three,, $fourth,,) = $arr;
list(,,,$first, $second, $three, $fourth,,,) = $arr;
list(,,,$first,,, $second,,, $three,,, $fourth,,,) = $arr;

list(0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong) = $arr;
list(,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong,, 1 => $secondVeryVeryVeryVeryLong,, 2 => $threeVeryVeryVeryVeryLong,, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong,,, 1 => $secondVeryVeryVeryVeryLong,,, 2 => $threeVeryVeryVeryVeryLong,,, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;

=====================================output=====================================
<?php

[$first, $second, $three, $fourth] = $arr;
[, $first, $second, $three, $fourth] = $arr;
[, , $first, $second, $three, $fourth, ,] = $arr;
[, , $first, , $second, , $three, , $fourth, ,] = $arr;
[, , , $first, $second, $three, $fourth, , ,] = $arr;
[, , , $first, , , $second, , , $three, , , $fourth, , ,] = $arr;

[
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
] = $arr;
[
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
] = $arr;
[
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
] = $arr;
[
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
] = $arr;
[
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
] = $arr;
[
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
] = $arr;

================================================================================
`;

exports[`list.php 5`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
trailingComma: "all"
trailingCommaPHP: false
                                                                                | printWidth
=====================================input======================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(,$first, $second, $three, $fourth,) = $arr;
list(,,$first, $second, $three, $fourth,,) = $arr;
list(,,$first,, $second,, $three,, $fourth,,) = $arr;
list(,,,$first, $second, $three, $fourth,,,) = $arr;
list(,,,$first,,, $second,,, $three,,, $fourth,,,) = $arr;

list(0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong) = $arr;
list(,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,0 => $firstVeryVeryVeryVeryLong,, 1 => $secondVeryVeryVeryVeryLong,, 2 => $threeVeryVeryVeryVeryLong,, 3 => $fourthVeryVeryVeryVeryLong,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong, 1 => $secondVeryVeryVeryVeryLong, 2 => $threeVeryVeryVeryVeryLong, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;
list(,,,0 => $firstVeryVeryVeryVeryLong,,, 1 => $secondVeryVeryVeryVeryLong,,, 2 => $threeVeryVeryVeryVeryLong,,, 3 => $fourthVeryVeryVeryVeryLong,,,) = $arr;

=====================================output=====================================
<?php

list($first, $second, $three, $fourth) = $arr;
list(, $first, $second, $three, $fourth) = $arr;
list(, , $first, $second, $three, $fourth, ,) = $arr;
list(, , $first, , $second, , $three, , $fourth, ,) = $arr;
list(, , , $first, $second, $three, $fourth, , ,) = $arr;
list(, , , $first, , , $second, , , $three, , , $fourth, , ,) = $arr;

list(
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong
) = $arr;
list(
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong
) = $arr;
list(
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
) = $arr;
list(
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
) = $arr;
list(
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    1 => $secondVeryVeryVeryVeryLong,
    2 => $threeVeryVeryVeryVeryLong,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
) = $arr;
list(
    ,
    ,
    ,
    0 => $firstVeryVeryVeryVeryLong,
    ,
    ,
    1 => $secondVeryVeryVeryVeryLong,
    ,
    ,
    2 => $threeVeryVeryVeryVeryLong,
    ,
    ,
    3 => $fourthVeryVeryVeryVeryLong,
    ,
    ,
) = $arr;

================================================================================
`;

exports[`unset.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

unset($foo, $bar,);
unset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,);

=====================================output=====================================
<?php

unset($foo, $bar);
unset(
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
);

================================================================================
`;

exports[`unset.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.0"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

unset($foo, $bar,);
unset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,);

=====================================output=====================================
<?php

unset($foo, $bar);
unset(
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
);

================================================================================
`;

exports[`unset.php 3`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.2"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

unset($foo, $bar,);
unset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,);

=====================================output=====================================
<?php

unset($foo, $bar);
unset(
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
);

================================================================================
`;

exports[`unset.php 4`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.3"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

unset($foo, $bar,);
unset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,);

=====================================output=====================================
<?php

unset($foo, $bar);
unset(
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
);

================================================================================
`;

exports[`unset.php 5`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
trailingComma: "all"
trailingCommaPHP: false
                                                                                | printWidth
=====================================input======================================
<?php

unset($foo, $bar,);
unset($veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong, $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,);

=====================================output=====================================
<?php

unset($foo, $bar);
unset(
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong,
    $veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLong
);

================================================================================
`;

exports[`use.php 1`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC,};
use function foo\\bar\\{fn_a, fn_b, fn_c,};
use const foo\\bar\\{ConstA, ConstB, ConstC,};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C,};

use foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC,};
use function foo\\bar\\{very_very_very_very_very_long_fn_a, very_very_very_very_very_long_fn_b, very_very_very_very_very_long_fn_c,};
use const foo\\bar\\{VeryVeryVeryVeryVeryLongConstA, VeryVeryVeryVeryVeryLongConstB, VeryVeryVeryVeryVeryLongConstC,};
use other_foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC as C,};

=====================================output=====================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC};
use function foo\\bar\\{fn_a, fn_b, fn_c};
use const foo\\bar\\{ConstA, ConstB, ConstC};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C};

use foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC
};
use function foo\\bar\\{
    very_very_very_very_very_long_fn_a,
    very_very_very_very_very_long_fn_b,
    very_very_very_very_very_long_fn_c
};
use const foo\\bar\\{
    VeryVeryVeryVeryVeryLongConstA,
    VeryVeryVeryVeryVeryLongConstB,
    VeryVeryVeryVeryVeryLongConstC
};
use other_foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC as C
};

================================================================================
`;

exports[`use.php 2`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "5.0"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC,};
use function foo\\bar\\{fn_a, fn_b, fn_c,};
use const foo\\bar\\{ConstA, ConstB, ConstC,};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C,};

use foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC,};
use function foo\\bar\\{very_very_very_very_very_long_fn_a, very_very_very_very_very_long_fn_b, very_very_very_very_very_long_fn_c,};
use const foo\\bar\\{VeryVeryVeryVeryVeryLongConstA, VeryVeryVeryVeryVeryLongConstB, VeryVeryVeryVeryVeryLongConstC,};
use other_foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC as C,};

=====================================output=====================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC};
use function foo\\bar\\{fn_a, fn_b, fn_c};
use const foo\\bar\\{ConstA, ConstB, ConstC};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C};

use foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC
};
use function foo\\bar\\{
    very_very_very_very_very_long_fn_a,
    very_very_very_very_very_long_fn_b,
    very_very_very_very_very_long_fn_c
};
use const foo\\bar\\{
    VeryVeryVeryVeryVeryLongConstA,
    VeryVeryVeryVeryVeryLongConstB,
    VeryVeryVeryVeryVeryLongConstC
};
use other_foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC as C
};

================================================================================
`;

exports[`use.php 3`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.2"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC,};
use function foo\\bar\\{fn_a, fn_b, fn_c,};
use const foo\\bar\\{ConstA, ConstB, ConstC,};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C,};

use foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC,};
use function foo\\bar\\{very_very_very_very_very_long_fn_a, very_very_very_very_very_long_fn_b, very_very_very_very_very_long_fn_c,};
use const foo\\bar\\{VeryVeryVeryVeryVeryLongConstA, VeryVeryVeryVeryVeryLongConstB, VeryVeryVeryVeryVeryLongConstC,};
use other_foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC as C,};

=====================================output=====================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC};
use function foo\\bar\\{fn_a, fn_b, fn_c};
use const foo\\bar\\{ConstA, ConstB, ConstC};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C};

use foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC,
};
use function foo\\bar\\{
    very_very_very_very_very_long_fn_a,
    very_very_very_very_very_long_fn_b,
    very_very_very_very_very_long_fn_c,
};
use const foo\\bar\\{
    VeryVeryVeryVeryVeryLongConstA,
    VeryVeryVeryVeryVeryLongConstB,
    VeryVeryVeryVeryVeryLongConstC,
};
use other_foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC as C,
};

================================================================================
`;

exports[`use.php 4`] = `
====================================options=====================================
parsers: ["php"]
phpVersion: "7.3"
printWidth: 80
trailingCommaPHP: true
                                                                                | printWidth
=====================================input======================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC,};
use function foo\\bar\\{fn_a, fn_b, fn_c,};
use const foo\\bar\\{ConstA, ConstB, ConstC,};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C,};

use foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC,};
use function foo\\bar\\{very_very_very_very_very_long_fn_a, very_very_very_very_very_long_fn_b, very_very_very_very_very_long_fn_c,};
use const foo\\bar\\{VeryVeryVeryVeryVeryLongConstA, VeryVeryVeryVeryVeryLongConstB, VeryVeryVeryVeryVeryLongConstC,};
use other_foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC as C,};

=====================================output=====================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC};
use function foo\\bar\\{fn_a, fn_b, fn_c};
use const foo\\bar\\{ConstA, ConstB, ConstC};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C};

use foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC,
};
use function foo\\bar\\{
    very_very_very_very_very_long_fn_a,
    very_very_very_very_very_long_fn_b,
    very_very_very_very_very_long_fn_c,
};
use const foo\\bar\\{
    VeryVeryVeryVeryVeryLongConstA,
    VeryVeryVeryVeryVeryLongConstB,
    VeryVeryVeryVeryVeryLongConstC,
};
use other_foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC as C,
};

================================================================================
`;

exports[`use.php 5`] = `
====================================options=====================================
parsers: ["php"]
printWidth: 80
trailingComma: "all"
trailingCommaPHP: false
                                                                                | printWidth
=====================================input======================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC,};
use function foo\\bar\\{fn_a, fn_b, fn_c,};
use const foo\\bar\\{ConstA, ConstB, ConstC,};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C,};

use foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC,};
use function foo\\bar\\{very_very_very_very_very_long_fn_a, very_very_very_very_very_long_fn_b, very_very_very_very_very_long_fn_c,};
use const foo\\bar\\{VeryVeryVeryVeryVeryLongConstA, VeryVeryVeryVeryVeryLongConstB, VeryVeryVeryVeryVeryLongConstC,};
use other_foo\\bar\\{VeryVeryVeryVeryVeryLongClassA, VeryVeryVeryVeryVeryLongClassB, VeryVeryVeryVeryVeryLongClassC as C,};

=====================================output=====================================
<?php

use foo\\bar\\{ClassA, ClassB, ClassC};
use function foo\\bar\\{fn_a, fn_b, fn_c};
use const foo\\bar\\{ConstA, ConstB, ConstC};
use other_foo\\bar\\{ClassA, ClassB, ClassC as C};

use foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC
};
use function foo\\bar\\{
    very_very_very_very_very_long_fn_a,
    very_very_very_very_very_long_fn_b,
    very_very_very_very_very_long_fn_c
};
use const foo\\bar\\{
    VeryVeryVeryVeryVeryLongConstA,
    VeryVeryVeryVeryVeryLongConstB,
    VeryVeryVeryVeryVeryLongConstC
};
use other_foo\\bar\\{
    VeryVeryVeryVeryVeryLongClassA,
    VeryVeryVeryVeryVeryLongClassB,
    VeryVeryVeryVeryVeryLongClassC as C
};

================================================================================
`;
